(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{523:function(t,e,n){"use strict";n.r(e);var a=n(21),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"项目优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目优化"}},[t._v("#")]),t._v(" 项目优化")]),t._v(" "),n("h2",{attrs:{id:"使用策略模式重构多系统环境下的用户认证授权"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用策略模式重构多系统环境下的用户认证授权"}},[t._v("#")]),t._v(" 使用策略模式重构多系统环境下的用户认证授权")]),t._v(" "),n("h3",{attrs:{id:"需求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[t._v("#")]),t._v(" 需求")]),t._v(" "),n("p",[t._v("小说精品屋由前台门户系统、作家后台管理系统、平台后台管理系统和爬虫管理系统以及后面可能会扩展的漫画系统和视频系统等多个子系统构成，是一个复杂的多系统环境。平台端的后台管理系统和爬虫管理系统账号是独立的，用户端其它子系统要求统一账号登录。那么我们应该如何设计才能统一对这些系统进行认证授权呢 ？")]),t._v(" "),n("h3",{attrs:{id:"实现思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现思路"}},[t._v("#")]),t._v(" 实现思路")]),t._v(" "),n("p",[t._v("我们提供平台管理后台、爬虫管理后台和单点登录三个登录入口，前端在每个登录入口登录成功之后都会获得后端返回的 token，这个时候需要分别保存起来，\n在请求相应系统的后端接口时，通过请求头携带上相应的 token。")]),t._v(" "),n("p",[t._v("后端需要配置一个统一的拦截器，根据请求的 URI 识别出相应系统类型，并对这些 token 进行解析得到 userId。这个时候就可以根据用户来鉴权，如果用户有权访问，则放行。否则，返回一个相应的错误码给前端。具体代码如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class AuthInterceptor implements HandlerInterceptor {\n\n    private final JwtUtils jwtUtils;\n\n    private final ObjectMapper objectMapper;\n\n    @SuppressWarnings("NullableProblems")\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 校验登录 token\n        String token = request.getHeader(SystemConfigConsts.HTTP_AUTH_HEADER_NAME);\n        if (!Objects.isNull(token)) {\n            String requestUri = request.getRequestURI();\n            if (requestUri.contains(ApiRouterConsts.API_FRONT_URL_PREFIX)) {\n                // 校验门户系统用户权限\n                Long userId = jwtUtils.parseToken(token, SystemConfigConsts.NOVEL_FRONT_KEY);\n                if (!Objects.isNull(userId)) {\n                    // TODO 查询用户信息并校验账号状态是否正常\n                    // TODO 其它权限校验\n                    // 认证成功\n                    return HandlerInterceptor.super.preHandle(request, response, handler);\n                }\n            }else if (requestUri.contains(ApiRouterConsts.API_AUTHOR_URL_PREFIX)){\n                // TODO 校验作家后台管理系统用户权限\n\n            }else if (requestUri.contains(ApiRouterConsts.API_ADMIN_URL_PREFIX)){\n                // TODO 校验平台后台管理系统用户权限\n            }\n            //。。。更多系统权限校验\n            // 完整实现可能至少几百行的代码\n\n        }\n        response.setCharacterEncoding(StandardCharsets.UTF_8.name());\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.getWriter().write(objectMapper.writeValueAsString(RestResp.fail(ErrorCodeEnum.USER_LOGIN_EXPIRED)));\n        return false;\n    }\n}\n')])])]),n("p",[t._v("此时，可以简单的实现基本的权限拦截功能。但是因为所有系统的认证授权逻辑都在这一个方法中，代码及其臃肿难以维护。每当某一系统授权逻辑发生变化或者新增加了一个子系统，都需要修改此处的代码。修改之前不但必须先完全理解这一大段代码，正确定位到需要修改的位置，而且极其容易影响到不相干的其它系统认证授权功能。久而久之就没有人愿意维护这部分代码了。为了解决这个问题，下面我们使用策略模式来重构该功能。")]),t._v(" "),n("h3",{attrs:{id:"策略模式定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#策略模式定义"}},[t._v("#")]),t._v(" 策略模式定义")]),t._v(" "),n("blockquote",[n("p",[t._v("策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。")])]),t._v(" "),n("p",[t._v("策略模式的核心在于封装变化，在我们系统中就是定义多个不同系统的认证授权策略（算法族），分别封装成独立的类。拦截器（客户）在运行时根据具体的请求 URI 来动态调用相应系统的认证授权算法。当某一系统的认证授权逻辑发生变化或增加新的子系统时，我们只需要修改或增加相应的策略类，而不会影响到其它的策略类（子系统）和客户（拦截器）。")]),t._v(" "),n("h3",{attrs:{id:"重构步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重构步骤"}},[t._v("#")]),t._v(" 重构步骤")]),t._v(" "),n("ol",[n("li",[t._v("在"),n("code",[t._v("io.github.xxyopen.novel.core.auth")]),t._v("包下创建 AuthStrategy 接口，该接口定义了一个默认的方法实现用户端所有子系统都需要的统一账号认证逻辑和一个封装各个系统独立认证授权逻辑的待实现方法（例如，作家管理系统还需要验证作家账号是否存在和作家状态是否正常）：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 策略模式实现用户认证授权功能\n *\n * @author xiongxiaoyang\n * @date 2022/5/18\n */\npublic interface AuthStrategy {\n\n    /**\n     * 用户认证授权\n     *\n     * @param token      登录 token\n     * @param requestUri 请求的 URI\n     * @throws BusinessException 认证失败则抛出业务异常\n     */\n    void auth(String token, String requestUri) throws BusinessException;\n\n    /**\n     * 前台多系统单点登录统一账号认证（门户系统、作家系统以及后面会扩展的漫画系统和视频系统等）\n     *\n     * @param jwtUtils             jwt 工具\n     * @param userInfoCacheManager 用户缓存管理对象\n     * @param token                token 登录 token\n     * @return 用户ID\n     */\n    default Long authSSO(JwtUtils jwtUtils, UserInfoCacheManager userInfoCacheManager,\n        String token) {\n        if (!StringUtils.hasText(token)) {\n            // token 为空\n            throw new BusinessException(ErrorCodeEnum.USER_LOGIN_EXPIRED);\n        }\n        Long userId = jwtUtils.parseToken(token, SystemConfigConsts.NOVEL_FRONT_KEY);\n        if (Objects.isNull(userId)) {\n            // token 解析失败\n            throw new BusinessException(ErrorCodeEnum.USER_LOGIN_EXPIRED);\n        }\n        UserInfoDto userInfo = userInfoCacheManager.getUser(userId);\n        if (Objects.isNull(userInfo)) {\n            // 用户不存在\n            throw new BusinessException(ErrorCodeEnum.USER_ACCOUNT_NOT_EXIST);\n        }\n        // 设置 userId 到当前线程\n        UserHolder.setUserId(userId);\n        // 返回 userId\n        return userId;\n    }\n\n}\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("接着在该包下创建各个系统的认证授权策略类，实现上述的 AuthStrategy 接口：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 前台门户系统 认证授权策略\n *\n * @author xiongxiaoyang\n * @date 2022/5/18\n */\n@Component\n@RequiredArgsConstructor\npublic class FrontAuthStrategy implements AuthStrategy {\n\n    private final JwtUtils jwtUtils;\n\n    private final UserInfoCacheManager userInfoCacheManager;\n\n    @Override\n    public void auth(String token, String requestUri) throws BusinessException {\n        // 统一账号认证\n        authSSO(jwtUtils, userInfoCacheManager, token);\n    }\n\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 作家后台管理系统 认证授权策略\n *\n * @author xiongxiaoyang\n * @date 2022/5/18\n */\n@Component\n@RequiredArgsConstructor\npublic class AuthorAuthStrategy implements AuthStrategy {\n\n    private final JwtUtils jwtUtils;\n\n    private final UserInfoCacheManager userInfoCacheManager;\n\n    private final AuthorInfoCacheManager authorInfoCacheManager;\n\n    /**\n     * 不需要进行作家权限认证的 URI\n     */\n    private static final List<String> EXCLUDE_URI = List.of(\n        ApiRouterConsts.API_AUTHOR_URL_PREFIX + "/register",\n        ApiRouterConsts.API_AUTHOR_URL_PREFIX + "/status"\n    );\n\n    @Override\n    public void auth(String token, String requestUri) throws BusinessException {\n        // 统一账号认证\n        Long userId = authSSO(jwtUtils, userInfoCacheManager, token);\n        if (EXCLUDE_URI.contains(requestUri)) {\n            // 该请求不需要进行作家权限认证\n            return;\n        }\n        // 作家权限校验\n        AuthorInfoDto authorInfo = authorInfoCacheManager.getAuthor(userId);\n        if (Objects.isNull(authorInfo)) {\n            // 作家账号不存在，无权访问作家专区\n            throw new BusinessException(ErrorCodeEnum.USER_UN_AUTH);\n        }\n\n        // 设置作家ID到当前线程\n        UserHolder.setAuthorId(authorInfo.getId());\n    }\n    \n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 平台后台管理系统 认证授权策略\n *\n * @author xiongxiaoyang\n * @date 2022/5/18\n */\n@Component\n@RequiredArgsConstructor\npublic class AdminAuthStrategy implements AuthStrategy {\n\n    @Override\n    public void auth(String token, String requestUri) throws BusinessException {\n        // TODO 平台后台 token 校验\n    }\n    \n}\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("最后在拦截器中根据请求 URI 动态调用相应策略：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 认证授权 拦截器\n * 为了注入其它的 Spring beans，需要通过 @Component 注解将该拦截器注册到 Spring 上下文\n *\n * @author xiongxiaoyang\n * @date 2022/5/18\n */\n@Component\n@RequiredArgsConstructor\npublic class AuthInterceptor implements HandlerInterceptor {\n\n    private final Map<String,AuthStrategy> authStrategy;\n\n    private final ObjectMapper objectMapper;\n\n    @SuppressWarnings("NullableProblems")\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 获取登录 JWT\n        String token = request.getHeader(SystemConfigConsts.HTTP_AUTH_HEADER_NAME);\n\n        // 获取请求的 URI\n        String requestUri = request.getRequestURI();\n\n        // 根据请求的 URI 得到认证策略\n        String subUri = requestUri.substring(ApiRouterConsts.API_URL_PREFIX.length() + 1);\n        String systemName = subUri.substring(0,subUri.indexOf("/"));\n        String authStrategyName = String.format("%sAuthStrategy",systemName);\n\n        // 开始认证\n        try {\n            authStrategy.get(authStrategyName).auth(token);\n            return HandlerInterceptor.super.preHandle(request, response, handler);\n        }catch (BusinessException exception){\n            // 认证失败\n            response.setCharacterEncoding(StandardCharsets.UTF_8.name());\n            response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n            response.getWriter().write(objectMapper.writeValueAsString(RestResp.fail(exception.getErrorCodeEnum())));\n            return false;\n        }\n    }\n\n    @SuppressWarnings("NullableProblems")\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        // 清理当前线程保存的用户数据\n        UserHolder.clear();\n        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);\n    }\n}\n')])])]),n("h2",{attrs:{id:"使用装饰者模式解决表单形式传参的-xss-攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用装饰者模式解决表单形式传参的-xss-攻击"}},[t._v("#")]),t._v(" 使用装饰者模式解决表单形式传参的 XSS 攻击")]),t._v(" "),n("h3",{attrs:{id:"xss-攻击定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击定义"}},[t._v("#")]),t._v(" XSS 攻击定义")]),t._v(" "),n("blockquote",[n("p",[t._v("跨站脚本攻击（XSS），是最普遍的 Web 应用安全漏洞。能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。")])]),t._v(" "),n("p",[t._v("例如，在 novel 项目中，如果没有预防 XSS 攻击的话。恶意用户进入到我们小说评论区，发表如下评论：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script>\n    // 获取当前登录用户的认证 token\n    token = localStorage.getItem('Authorization');\n    // TODO 通过 ajax 请求发送该 token 到恶意用户的指定服务器\n<\/script>\n")])])]),n("p",[t._v("当其他正常用户登录成功进入到小说评论区后，会自动执行上述的 javascript 脚本，自己的登录 token 会被发送到攻击者的服务器上。攻击者拿到该 token 后即可利用该 token 来冒充正常用户进行一系列例如资金转账等危险操作。")]),t._v(" "),n("p",[t._v("攻击者还可以利用该漏洞在我们系统中插入恶意内容（例如广告）、重定向用户（重定向到黄赌毒网站）等。")]),t._v(" "),n("p",[t._v("注：人们经常将跨站脚本攻击（Cross Site Scripting）缩写为 CSS，但这会与层叠样式表（Cascading Style Sheets，CSS）的缩写混淆。因此，有人将跨站脚本攻击缩写为 XSS。")]),t._v(" "),n("h3",{attrs:{id:"装饰者模式定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式定义"}},[t._v("#")]),t._v(" 装饰者模式定义")]),t._v(" "),n("blockquote",[n("p",[t._v("动态将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。")])]),t._v(" "),n("p",[t._v("装饰者可以在被装饰者的行为前面与/或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。")]),t._v(" "),n("p",[t._v("Spring MVC 是通过 HttpServletRequest 的 getParameterValues 方法来获取用户端的请求参数并绑定到我们 @RequestMapping 方法定义的对象上。所以我们可以装饰 HttpServletRequest 对象，在 getParameterValues 方法里加上自己的行为（对请求参数值里面的特殊字符进行转义）来解决 XSS 攻击。")]),t._v(" "),n("p",[t._v("由于 Servlet Api 提供了 HttpServletRequest 接口的便捷实现 HttpServletRequestWrapper 类，该类已经实现了装饰者模式，我们直接继承该类并重写里面的 getParameterValues 方法即可。")]),t._v(" "),n("h3",{attrs:{id:"实现步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现步骤"}},[t._v("#")]),t._v(" 实现步骤")]),t._v(" "),n("ol",[n("li",[t._v("新建 XssHttpServletRequestWrapper 装饰者类继承 HttpServletRequestWrapper 类，并重写 getParameterValues 方法，对里面字符串的特殊字符进行转义：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper {\n\n    private static final Map<String,String> REPLACE_RULE = new HashMap<>();\n\n    static {\n        REPLACE_RULE.put("<", "&lt;");\n        REPLACE_RULE.put(">", "&gt;");\n    }\n\n    public XssHttpServletRequestWrapper(HttpServletRequest request) {\n        super(request);\n    }\n\n    @Override\n    public String[] getParameterValues(String name) {\n        String[] values = super.getParameterValues(name);\n        if (values != null) {\n            int length = values.length;\n            String[] escapeValues = new String[length];\n            for (int i = 0; i < length; i++) {\n                escapeValues[i] = values[i];\n                int index = i;\n                REPLACE_RULE.forEach((k, v)-> escapeValues[index] = escapeValues[index].replaceAll(k, v));\n            }\n            return escapeValues;\n        }\n        return new String[0];\n    }\n}\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("新建 XssFilter 过滤器，使用 XssHttpServletRequestWrapper 装饰者对象替换掉 HttpServletRequest 被装饰者对象：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        XssHttpServletRequestWrapper xssRequest = new XssHttpServletRequestWrapper((HttpServletRequest) servletRequest);\n        filterChain.doFilter(xssRequest, servletResponse);\n    }\n")])])]),n("h2",{attrs:{id:"一行代码解决-json-形式传参的-xss-攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一行代码解决-json-形式传参的-xss-攻击"}},[t._v("#")]),t._v(" 一行代码解决 JSON 形式传参的 XSS 攻击")]),t._v(" "),n("h3",{attrs:{id:"问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),n("p",[t._v("前后端分离项目，对于 POST 和 PUT 类型的请求方法，后端基本都是通过 @RequestBody 注解接收 application/json 格式的请求数据，所以以前通过过滤器 + 装饰器 HttpServletRequestWrapper 来解决 XSS 攻击的方式并不适用。在 Spring Boot 中，我们可以通过配置全局的 Json 反序列化器转义特殊字符来解决 XSS 攻击。")]),t._v(" "),n("h3",{attrs:{id:"实现代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现代码"}},[t._v("#")]),t._v(" 实现代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * JSON 全局反序列化器\n *\n * @author xiongxiaoyang\n * @date 2022/5/21\n */\n@JsonComponent\npublic class GlobalJsonDeserializer {\n\n    /**\n     * 字符串反序列化器\n     * 过滤特殊字符，解决 XSS 攻击\n     */\n    public static class StringDeserializer extends JsonDeserializer<String> {\n\n        @Override\n        public String deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JacksonException {\n\t\t// 实际代码就这一行\n            return jsonParser.getValueAsString()\n                    .replace("<", "&lt;")\n                    .replace(">", "&gt;");\n        }\n    }\n}\n')])])]),n("h2",{attrs:{id:"集成-elasticsearch-8-实现搜索引擎动态切换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集成-elasticsearch-8-实现搜索引擎动态切换"}},[t._v("#")]),t._v(" 集成 Elasticsearch 8，实现搜索引擎动态切换")]),t._v(" "),n("ol",[n("li",[n("p",[n("RouterLink",{attrs:{to:"/course/novel/4.html#搜索引擎-elasticsearch-集成与配置"}},[t._v("Elasticsearch 集成与配置")])],1)]),t._v(" "),n("li",[n("p",[t._v("在 application.yml 中增加 "),n("code",[t._v("spring.elasticsearch.enable")]),t._v(" 配置项用来控制 Elasticsearch 搜索引擎功能是否开启：")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("spring:\n  elasticsearch:\n    # 是否开启 elasticsearch 搜索引擎功能：true-开启 false-不开启\n    enable: false\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("新建搜索服务类：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * 搜索 服务类\n *\n * @author xiongxiaoyang\n * @date 2022/5/23\n */\npublic interface SearchService {\n\n    /**\n     * 小说搜索\n     *\n     * @param condition 搜索条件\n     * @return 搜索结果\n     */\n    RestResp<PageRespDto<BookInfoRespDto>> searchBooks(BookSearchReqDto condition);\n\n}\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("新建"),n("code",[t._v("数据库搜索")]),t._v("服务实现类，实现从数据库中检索小说的业务逻辑，由配置项"),n("code",[t._v("spring.elasticsearch.enable")]),t._v("控制当 elasticsearch 关闭时生效：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 数据库搜索 服务实现类\n *\n * @author xiongxiaoyang\n * @date 2022/5/23\n */\n@ConditionalOnProperty(prefix = "spring.elasticsearch", name = "enable", havingValue = "false")\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class DbSearchServiceImpl implements SearchService {\n\n    private final BookInfoMapper bookInfoMapper;\n\n    @Override\n    public RestResp<PageRespDto<BookInfoRespDto>> searchBooks(BookSearchReqDto condition) {\n        Page<BookInfoRespDto> page = new Page<>();\n        page.setCurrent(condition.getPageNum());\n        page.setSize(condition.getPageSize());\n        List<BookInfo> bookInfos = bookInfoMapper.searchBooks(page, condition);\n        return RestResp.ok(PageRespDto.of(condition.getPageNum(), condition.getPageSize(), page.getTotal()\n                , bookInfos.stream().map(v -> BookInfoRespDto.builder()\n                        .id(v.getId())\n                        .bookName(v.getBookName())\n                        .categoryId(v.getCategoryId())\n                        .categoryName(v.getCategoryName())\n                        .authorId(v.getAuthorId())\n                        .authorName(v.getAuthorName())\n                        .wordCount(v.getWordCount())\n                        .lastChapterName(v.getLastChapterName())\n                        .build()).toList()));\n    }\n\n}\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("新建"),n("code",[t._v("Elasticsearch 搜索引擎搜索")]),t._v("服务实现类，实现从 Elasticsearch 中检索小说的业务逻辑，由配置项"),n("code",[t._v("spring.elasticsearch.enable")]),t._v("控制当 elasticsearch 开启时生效：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * Elasticsearch 搜索 服务实现类\n *\n * @author xiongxiaoyang\n * @date 2022/5/23\n */\n@ConditionalOnProperty(prefix = "spring.elasticsearch", name = "enable", havingValue = "true")\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class EsSearchServiceImpl implements SearchService {\n\n    private final ElasticsearchClient esClient;\n\n    @SneakyThrows\n    @Override\n    public RestResp<PageRespDto<BookInfoRespDto>> searchBooks(BookSearchReqDto condition) {\n\n        SearchResponse<EsBookDto> response = esClient.search(s -> {\n\n                    SearchRequest.Builder searchBuilder = s.index(EsConsts.IndexEnum.BOOK.getName());\n                    buildSearchCondition(condition, searchBuilder);\n                    // 排序\n                    if (!StringUtils.isBlank(condition.getSort())) {\n                        searchBuilder.sort(o ->\n                                o.field(f -> f.field(StringUtils\n                                                .underlineToCamel(condition.getSort().split(" ")[0]))\n                                        .order(SortOrder.Desc))\n                        );\n                    }\n                    // 分页\n                    searchBuilder.from((condition.getPageNum() - 1) * condition.getPageSize())\n                            .size(condition.getPageSize());\n\n                    return searchBuilder;\n                },\n                EsBookDto.class\n        );\n\n        TotalHits total = response.hits().total();\n\n        List<BookInfoRespDto> list = new ArrayList<>();\n        List<Hit<EsBookDto>> hits = response.hits().hits();\n        for (Hit<EsBookDto> hit : hits) {\n            EsBookDto book = hit.source();\n            assert book != null;\n            list.add(BookInfoRespDto.builder()\n                    .id(book.getId())\n                    .bookName(book.getBookName())\n                    .categoryId(book.getCategoryId())\n                    .categoryName(book.getCategoryName())\n                    .authorId(book.getAuthorId())\n                    .authorName(book.getAuthorName())\n                    .wordCount(book.getWordCount())\n                    .lastChapterName(book.getLastChapterName())\n                    .build());\n        }\n        assert total != null;\n        return RestResp.ok(PageRespDto.of(condition.getPageNum(), condition.getPageSize(), total.value(), list));\n    \n    }\n\n    /**\n    * 构建查询条件\n    */\n    private void buildSearchCondition(BookSearchReqDto condition, SearchRequest.Builder searchBuilder) {\n\n        BoolQuery boolQuery = BoolQuery.of(b -> {\n\n            if (!StringUtils.isBlank(condition.getKeyword())) {\n                // 关键词匹配\n                b.must((q -> q.multiMatch(t -> t\n                        .fields("bookName^2","authorName^1.8","bookDesc^0.1")\n                        .query(condition.getKeyword())\n                )\n                ));\n            }\n\n            // 精确查询\n            if (Objects.nonNull(condition.getWorkDirection())) {\n                b.must(TermQuery.of(m -> m\n                        .field("workDirection")\n                        .value(condition.getWorkDirection())\n                )._toQuery());\n            }\n\n            if (Objects.nonNull(condition.getCategoryId())) {\n                b.must(TermQuery.of(m -> m\n                        .field("categoryId")\n                        .value(condition.getCategoryId())\n                )._toQuery());\n            }\n\n            // 范围查询\n            if (Objects.nonNull(condition.getWordCountMin())) {\n                b.must(RangeQuery.of(m -> m\n                        .field("wordCount")\n                        .gte(JsonData.of(condition.getWordCountMin()))\n                )._toQuery());\n            }\n\n            if (Objects.nonNull(condition.getWordCountMax())) {\n                b.must(RangeQuery.of(m -> m\n                        .field("wordCount")\n                        .lt(JsonData.of(condition.getWordCountMax()))\n                )._toQuery());\n            }\n\n            if (Objects.nonNull(condition.getUpdateTimeMin())) {\n                b.must(RangeQuery.of(m -> m\n                        .field("lastChapterUpdateTime")\n                        .gte(JsonData.of(condition.getUpdateTimeMin().getTime()))\n                )._toQuery());\n            }\n\n            return b;\n\n        });\n\n        searchBuilder.query(q -> q.bool(boolQuery));\n\n    }\n}\n')])])]),n("ol",{attrs:{start:"6"}},[n("li",[n("code",[t._v("BookController")]),t._v(" 中注入 "),n("code",[t._v("SearchService")]),t._v(" bean，调用"),n("code",[t._v("searchBooks")]),t._v("方法实现按配置动态切换搜索引擎的功能：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class BookController {\n\n    private final SearchService searchService;\n\n    /**\n     * 小说搜索接口\n     */\n    @GetMapping("search_list")\n    public RestResp<PageRespDto<BookInfoRespDto>> searchBooks(BookSearchReqDto condition) {\n        return searchService.searchBooks(condition);\n    }\n\n}\n')])])]),n("h2",{attrs:{id:"使用-rabbitmq-刷新-es-redis-caffeine-等小说副本数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-rabbitmq-刷新-es-redis-caffeine-等小说副本数据"}},[t._v("#")]),t._v(" 使用 RabbitMQ 刷新 ES/Redis/Caffeine 等小说副本数据")]),t._v(" "),n("p",[t._v("在 novel 分布式环境中，数据库中的小说信息可能会在多个地方保存一份副本数据。例如，为了减轻数据库压力，提高并发和系统性能的本地缓存 Caffeine 和分布式缓存 Redis、为了实现小说全文高级检索的 Elasticsearch 搜索引擎等。有时为了应对小说详情页的高并发访问和 SEO 优化，我们还会选择为每一本小说生成静态化的页面，通过 Nginx 或 CDN 来访问。")]),t._v(" "),n("p",[t._v("此时，如果小说信息发生变更，那么如何通知所有的副本数据和静态页面更新呢？如果随着业务的发展和系统的演进，我们需要在 MongoDB 中增加一份存储副本，那么怎么在不修改调用方（所有小说信息发生变更的地方。例如，作家更新小说信息、作家发布新的章节或平台下架违规小说等场景）代码，不影响原先功能（其它副本数据的刷新）的同时，又能及时刷新 MongoDB 中的副本数据，实现模块间的解耦呢？")]),t._v(" "),n("p",[t._v("我们通过消息中间件来解决以上问题，实现步骤如下：")]),t._v(" "),n("ol",[n("li",[n("p",[n("RouterLink",{attrs:{to:"/course/novel/4.html#spring-amqp-集成与配置"}},[t._v("Spring AMQP 集成与配置")])],1)]),t._v(" "),n("li",[n("p",[t._v("在"),n("code",[t._v("io.github.xxyopen.novel.core.constant")]),t._v("包下创建 AMQP 相关常量类：")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * AMQP 相关常量\n *\n * @author xiongxiaoyang\n * @date 2022/5/25\n */\npublic class AmqpConsts {\n\n    /**\n     * 小说信息改变 MQ\n     * */\n    public static class BookChangeMq{\n\n        /**\n         * 小说信息改变交换机\n         * */\n        public static final String EXCHANGE_NAME = "EXCHANGE-BOOK-CHANGE";\n\n        /**\n         * Elasticsearch book 索引更新的队列\n         * */\n        public static final String QUEUE_ES_UPDATE = "QUEUE-ES-BOOK-UPDATE";\n\n        /**\n         * Redis book 缓存更新的队列\n         * */\n        public static final String QUEUE_REDIS_UPDATE = "QUEUE-REDIS-BOOK-UPDATE";\n\n        // ... 其它的更新队列\n\n    }\n\n}\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("在"),n("code",[t._v("io.github.xxyopen.novel.core.config")]),t._v("包下创建 AMQP 配置类，配置各个交换机、队列以及绑定关系：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * AMQP 配置类\n *\n * @author xiongxiaoyang\n * @date 2022/5/25\n */\n@Configuration\npublic class AmqpConfig {\n\n    /**\n     * 小说信息改变交换机\n     */\n    @Bean\n    public FanoutExchange bookChangeExchange() {\n        return new FanoutExchange(AmqpConsts.BookChangeMq.EXCHANGE_NAME);\n    }\n\n    /**\n     * Elasticsearch book 索引更新队列\n     */\n    @Bean\n    public Queue esBookUpdateQueue() {\n        return new Queue(AmqpConsts.BookChangeMq.QUEUE_ES_UPDATE);\n    }\n\n    /**\n     * Elasticsearch book 索引更新队列绑定到小说信息改变交换机\n     */\n    @Bean\n    public Binding esBookUpdateQueueBinding() {\n        return BindingBuilder.bind(esBookUpdateQueue()).to(bookChangeExchange());\n    }\n\n    // ... 其它的更新队列以及绑定关系\n\n}\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("在"),n("code",[t._v("io.github.xxyopen.novel.manager.mq")]),t._v("包下创建 AMQP 消息管理类，用来发送各种 AMQP 消息：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * AMQP 消息管理类\n *\n * @author xiongxiaoyang\n * @date 2022/5/25\n */\n@Component\n@RequiredArgsConstructor\npublic class AmqpMsgManager {\n\n    private final AmqpTemplate amqpTemplate;\n\n    @Value("${spring.amqp.enable}")\n    private String enableAmqp;\n\n    /**\n     * 发送小说信息改变消息\n     */\n    public void sendBookChangeMsg(Long bookId) {\n        if (Objects.equals(enableAmqp, CommonConsts.TRUE)) {\n            sendAmqpMessage(amqpTemplate, AmqpConsts.BookChangeMq.EXCHANGE_NAME, null, bookId);\n        }\n    }\n\n    private void sendAmqpMessage(AmqpTemplate amqpTemplate, String exchange, String routingKey, Object message) {\n        // 如果在事务中则在事务执行完成后再发送，否则可以直接发送\n        if (TransactionSynchronizationManager.isActualTransactionActive()) {\n            TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() {\n                @Override\n                public void afterCommit() {\n                    amqpTemplate.convertAndSend(exchange, routingKey, message);\n                }\n            });\n            return;\n        }\n        amqpTemplate.convertAndSend(exchange, routingKey, message);\n    }\n\n}\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("在小说信息更新后，发送 AMQP 消息：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@Transactional(rollbackFor = Exception.class)\n@Override\npublic RestResp<Void> saveBookChapter(ChapterAddReqDto dto) {\n    // 1) 保存章节相关信息到小说章节表\n    //  a) 查询最新章节号\n    int chapterNum = 0;\n    QueryWrapper<BookChapter> chapterQueryWrapper = new QueryWrapper<>();\n    chapterQueryWrapper.eq(DatabaseConsts.BookChapterTable.COLUMN_BOOK_ID,dto.getBookId())\n            .orderByDesc(DatabaseConsts.BookChapterTable.COLUMN_CHAPTER_NUM)\n            .last(DatabaseConsts.SqlEnum.LIMIT_1.getSql());\n    BookChapter bookChapter = bookChapterMapper.selectOne(chapterQueryWrapper);\n    if(Objects.nonNull(bookChapter)){\n        chapterNum = bookChapter.getChapterNum() + 1;\n    }\n    //  b) 设置章节相关信息并保存\n    BookChapter newBookChapter = new BookChapter();\n    newBookChapter.setBookId(dto.getBookId());\n    newBookChapter.setChapterName(dto.getChapterName());\n    newBookChapter.setChapterNum(chapterNum);\n    newBookChapter.setWordCount(dto.getChapterContent().length());\n    newBookChapter.setIsVip(dto.getIsVip());\n    newBookChapter.setCreateTime(LocalDateTime.now());\n    newBookChapter.setUpdateTime(LocalDateTime.now());\n    bookChapterMapper.insert(newBookChapter);\n\n    // 2) 保存章节内容到小说内容表\n    BookContent bookContent = new BookContent();\n    bookContent.setContent(dto.getChapterContent());\n    bookContent.setChapterId(newBookChapter.getId());\n    bookContent.setCreateTime(LocalDateTime.now());\n    bookContent.setUpdateTime(LocalDateTime.now());\n    bookContentMapper.insert(bookContent);\n\n    // 3) 更新小说表最新章节信息和小说总字数信息\n    //  a) 更新小说表关于最新章节的信息\n    BookInfoRespDto bookInfo = bookInfoCacheManager.getBookInfo(dto.getBookId());\n    BookInfo newBookInfo = new BookInfo();\n    newBookInfo.setId(dto.getBookId());\n    newBookInfo.setLastChapterId(newBookChapter.getId());\n    newBookInfo.setLastChapterName(newBookChapter.getChapterName());\n    newBookInfo.setLastChapterUpdateTime(LocalDateTime.now());\n    newBookInfo.setWordCount(bookInfo.getWordCount() + newBookChapter.getWordCount());\n    newBookChapter.setUpdateTime(LocalDateTime.now());\n    bookInfoMapper.updateById(newBookInfo);\n    //  b) 刷新小说信息缓存\n    bookInfoCacheManager.cachePutBookInfo(dto.getBookId());\n    //  c) 发送小说信息更新的 MQ 消息\n    amqpMsgManager.sendBookChangeMsg(dto.getBookId());\n    return RestResp.ok();\n}\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[t._v("在"),n("code",[t._v("io.github.xxyopen.novel.core.listener")]),t._v("包下创建 Rabbit 队列监听器，监听各个 RabbitMQ 队列的消息并处理：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * Rabbit 队列监听器\n *\n * @author xiongxiaoyang\n * @date 2022/5/25\n */\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class RabbitQueueListener {\n\n    private final BookInfoMapper bookInfoMapper;\n\n    private final ElasticsearchClient esClient;\n\n    /**\n     * 监听小说信息改变的 ES 更新队列，更新最新小说信息到 ES\n     * */\n    @RabbitListener(queues = AmqpConsts.BookChangeMq.QUEUE_ES_UPDATE)\n    @SneakyThrows\n    public void updateEsBook(Long bookId) {\n        BookInfo bookInfo = bookInfoMapper.selectById(bookId);\n        IndexResponse response = esClient.index(i -> i\n                .index(EsConsts.BookIndex.INDEX_NAME)\n                .id(bookInfo.getId().toString())\n                .document(EsBookDto.build(bookInfo))\n        );\n        log.info("Indexed with version " + response.version());\n    }\n\n    // ... 监听其它队列，刷新其它副本数据\n\n}\n')])])]),n("p",[t._v("此时，如果需要更新其它副本数据，只需要配置更新队列和增加监听器，不需要修改任何业务代码，而且任意副本的数据刷新互不影响，真正实现了模块间的解耦。")]),t._v(" "),n("p",[n("strong",[t._v("注：当服务集群部署时，由于多个消费者绑定同一个队列是无法同时消费的，一个消息只能被一个消费者消费，所以刷新本地缓存的 MQ 队列命名应该使用"),n("code",[t._v("固定名 + 唯一随机值")]),t._v("这种动态形式。这样每次启动会生成一个新的队列，我们需要设置该队列的 autoDelete = true，让所有消费客户端连接断开时自动删除该队列。")])]),t._v(" "),n("h2",{attrs:{id:"使用-xxl-job-优化-elasticsearch-数据同步任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-xxl-job-优化-elasticsearch-数据同步任务"}},[t._v("#")]),t._v(" 使用 XXL-JOB 优化 Elasticsearch 数据同步任务")]),t._v(" "),n("ol",[n("li",[n("p",[n("RouterLink",{attrs:{to:"/course/novel/4.html#分布式任务调度平台-xxl-job-集成与配置"}},[t._v("XXL-JOB 集成与配置")])],1)]),t._v(" "),n("li",[n("p",[t._v("登录调度中心后台，新增 novel 项目任务执行器：")])])]),t._v(" "),n("p",[n("img",{attrs:{src:"/img/novel/xxljobexe.png",alt:"创建任务执行器"}})]),t._v(" "),n("p",[n("strong",[t._v("注：AppName 的值需要和 novel 项目 application.yml 配置文件中配置的值保持一致。")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("新增 Elasticsearch 数据同步任务：")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/img/novel/xxljobtask.png",alt:"创建任务"}})]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[t._v("修改"),n("code",[t._v("io.github.xxyopen.novel.core.task")]),t._v("包下的 Elasticsearch 数据同步任务（"),n("code",[t._v("@Scheduled")]),t._v(" 注解 替换为 "),n("code",[t._v("@XxlJob")]),t._v("​ 注解）：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 小说数据同步到 Elasticsearch 任务\n *\n * @author xiongxiaoyang\n * @date 2022/5/23\n */\n@ConditionalOnProperty(prefix = "spring.elasticsearch", name = "enable", havingValue = "true")\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class BookToEsTask {\n\n    private final BookInfoMapper bookInfoMapper;\n\n    private final ElasticsearchClient elasticsearchClient;\n\n    @SneakyThrows\n    @XxlJob("saveToEsJobHandler") // 此处需要和调度中心创建任务时填写的 JobHandler 值保持一致\n    public ReturnT<String> saveToEs() {\n         try {\n            QueryWrapper<BookInfo> queryWrapper = new QueryWrapper<>();\n            List<BookInfo> bookInfos;\n            long maxId = 0;\n            for (; ; ) {\n                queryWrapper.clear();\n                queryWrapper\n                        .orderByAsc(DatabaseConsts.CommonColumnEnum.ID.getName())\n                        .gt(DatabaseConsts.CommonColumnEnum.ID.getName(), maxId)\n                        .last(DatabaseConsts.SqlEnum.LIMIT_30.getSql());\n                bookInfos = bookInfoMapper.selectList(queryWrapper);\n                if (bookInfos.isEmpty()) {\n                    break;\n                }\n                BulkRequest.Builder br = new BulkRequest.Builder();\n\n                for (BookInfo book : bookInfos) {\n                    br.operations(op -> op\n                            .index(idx -> idx\n                                    .index(EsConsts.BookIndex.INDEX_NAME)\n                                    .id(book.getId().toString())\n                                    .document(EsBookDto.build(book))\n                            )\n                    ).timeout(Time.of(t -> t.time("10s")));\n                    maxId = book.getId();\n                }\n\n                BulkResponse result = elasticsearchClient.bulk(br.build());\n\n                // Log errors, if any\n                if (result.errors()) {\n                    log.error("Bulk had errors");\n                    for (BulkResponseItem item : result.items()) {\n                        if (item.error() != null) {\n                            log.error(item.error().reason());\n                        }\n                    }\n                }\n            }\n            return ReturnT.SUCCESS;\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return ReturnT.FAIL;\n        }\n    }\n\n}\n\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("查看任务执行器，可以发现已经有一台机器自动注册：")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/img/novel/xxljobonline.png",alt:"在线注册机器"}})]),t._v(" "),n("ol",{attrs:{start:"6"}},[n("li",[t._v("进入任务管理，我们可以启动 Elasticsearch 数据同步任务，由配置的 Cron 表达式进行任务调度；也可以选择手动触发一次任务执行：")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/img/novel/xxljobtaskexe.png",alt:"任务启动"}})]),t._v(" "),n("p",[t._v("此时，我们可以在任意时刻手动同步数据库的小说数据到 Elasticsearch 搜索引擎中，极大的方便了我们的开发测试工作。")]),t._v(" "),n("h2",{attrs:{id:"使用-sentinel-实现接口防刷和限流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-sentinel-实现接口防刷和限流"}},[t._v("#")]),t._v(" 使用 Sentinel 实现接口防刷和限流")]),t._v(" "),n("h3",{attrs:{id:"问题-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题-2"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),n("p",[t._v("novel 作为一个互联网系统，经常会遇到非法爬虫（例如，盗版小说网站）来爬取我们系统的小说数据，这种爬虫行为有时会高达每秒几百甚至上千次访问。防刷的目的是为了限制这些爬虫请求我们接口的频率，如果我们不做接口防刷限制的话，我们系统很容易就会被爬虫干倒。")]),t._v(" "),n("p",[t._v("限流的目的是在流量高峰期间，根据我们系统的承受能力，限制同时请求的数量，保证多余的请求会阻塞一段时间再处理，不简单粗暴的直接返回错误信息让客户端重试，同时又能起到流量削峰的作用。")]),t._v(" "),n("p",[t._v("很多时候，我们都是尽量将请求拦截在系统上游，比如在反向代理层通过 Nginx + Lua + Redis 来实现限流功能，这个在后面部署篇章里面会详细地讲解如何实现。如果我们系统还没有使用类似于 Nginx 一样的反向代理，又或者我们想实现更复杂的流量控制，想要一个人性化的控制面板来动态限流和实时监控，那么我们可以使用阿里巴巴开源的高可用流控防护组件 Sentinel 来实现。")]),t._v(" "),n("h3",{attrs:{id:"sentinel-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sentinel-介绍"}},[t._v("#")]),t._v(" Sentinel 介绍")]),t._v(" "),n("p",[t._v("Sentinel 是一个面向云原生微服务的高可用流控防护组件，以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。")]),t._v(" "),n("p",[t._v("Sentinel 有两个重要的概念，"),n("code",[t._v("资源")]),t._v("和"),n("code",[t._v("规则")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("资源")]),t._v("是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。")]),t._v(" "),n("p",[n("strong",[t._v("规则")]),t._v("是围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。")]),t._v(" "),n("p",[t._v("Sentinel 具有以下特征:")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。")])]),t._v(" "),n("li",[n("p",[t._v("完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。")])]),t._v(" "),n("li",[n("p",[t._v("广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java/Go/C++ 等多语言的原生实现。")])]),t._v(" "),n("li",[n("p",[t._v("完善的 SPI 扩展机制：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。")])])]),t._v(" "),n("p",[t._v("Sentinel 分为"),n("code",[t._v("核心库")]),t._v("和"),n("code",[t._v("控制台")]),t._v("两部分，"),n("code",[t._v("核心库")]),t._v("不依赖"),n("code",[t._v("控制台")]),t._v("，但是结合"),n("code",[t._v("控制台")]),t._v("可以取得最好的效果:")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。")])]),t._v(" "),n("li",[n("p",[t._v("控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。")])])]),t._v(" "),n("h3",{attrs:{id:"使用-sentinel-核心库实现接口防刷和限流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-sentinel-核心库实现接口防刷和限流"}},[t._v("#")]),t._v(" 使用 Sentinel 核心库实现接口防刷和限流")]),t._v(" "),n("ol",[n("li",[t._v("引入 Sentinel 相关依赖：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-core</artifactId>\n    <version>${sentinel.version}</version>\n</dependency>\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-parameter-flow-control</artifactId>\n    <version>${sentinel.version}</version>\n</dependency>\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("在"),n("code",[t._v("io.github.xxyopen.novel.core.config.WebConfig")]),t._v("中注册一个全局的拦截器拦截所有的请求：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 流量限制拦截器\nregistry.addInterceptor(flowLimitInterceptor)\n        .addPathPatterns("/**")\n        .order(0);\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("拦截器中定义资源和规则，资源在"),n("code",[t._v("preHandle")]),t._v("方法中定义，为所有请求的入口，"),n("code",[t._v("接口限流规则")]),t._v("和"),n("code",[t._v("接口防刷规则")]),t._v("通过"),n("code",[t._v("static 代码块")]),t._v("在类加载时初始化：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 流量限制 拦截器\n * 实现接口防刷和限流\n *\n * @author xiongxiaoyang\n * @date 2022/6/1\n */\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class FlowLimitInterceptor implements HandlerInterceptor {\n\n    private final ObjectMapper objectMapper;\n\n    /**\n     * novel 项目所有的资源\n     */\n    private static final String NOVEL_RESOURCE = "novelResource";\n\n    static {\n        // 接口限流规则：所有的请求，限制每秒最多只能通过 2000 个，超出限制匀速排队\n        List<FlowRule> rules = new ArrayList<>();\n        FlowRule rule1 = new FlowRule();\n        rule1.setResource(NOVEL_RESOURCE);\n        rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);\n        // Set limit QPS to 2000.\n        rule1.setCount(2000);\n        rule1.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER);\n        rules.add(rule1);\n        FlowRuleManager.loadRules(rules);\n\n        // 接口防刷规则 1：所有的请求，限制每个 IP 每秒最多只能通过 50 个，超出限制直接拒绝\n        ParamFlowRule rule2 = new ParamFlowRule(NOVEL_RESOURCE)\n                .setParamIdx(0)\n                .setCount(50);\n        // 接口防刷规则 2：所有的请求，限制每个 IP 每分钟最多只能通过 1000 个，超出限制直接拒绝\n        ParamFlowRule rule3 = new ParamFlowRule(NOVEL_RESOURCE)\n                .setParamIdx(0)\n                .setCount(1000)\n                .setDurationInSec(60);\n        ParamFlowRuleManager.loadRules(Arrays.asList(rule2, rule3));\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String ip = IpUtils.getRealIp(request);\n        Entry entry = null;\n        try {\n            // 若需要配置例外项，则传入的参数只支持基本类型。\n            // EntryType 代表流量类型，其中系统规则只对 IN 类型的埋点生效\n            // count 大多数情况都填 1，代表统计为一次调用。\n            entry = SphU.entry(NOVEL_RESOURCE, EntryType.IN, 1, ip);\n            // Your logic here.\n            return HandlerInterceptor.super.preHandle(request, response, handler);\n        } catch (BlockException ex) {\n            // Handle request rejection.\n            log.info("IP:{}被限流了！", ip);\n            response.setCharacterEncoding(StandardCharsets.UTF_8.name());\n            response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n            response.getWriter().write(objectMapper.writeValueAsString(RestResp.fail(ErrorCodeEnum.USER_REQ_MANY)));\n        } finally {\n            // 注意：exit 的时候也一定要带上对应的参数，否则可能会有统计错误。\n            if (entry != null) {\n                entry.exit(1, ip);\n            }\n        }\n        return false;\n    }\n\n}\n')])])]),n("p",[t._v("规则属性说明：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("属性")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("resource")]),t._v(" "),n("td",[t._v("资源名，必填")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("count")]),t._v(" "),n("td",[t._v("限流阈值，必填")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("grade")]),t._v(" "),n("td",[t._v("限流模式")]),t._v(" "),n("td",[t._v("QPS 模式")])]),t._v(" "),n("tr",[n("td",[t._v("durationInSec")]),t._v(" "),n("td",[t._v("统计窗口时间长度（单位为秒），1.6.0 版本开始支持")]),t._v(" "),n("td",[t._v("1s")])]),t._v(" "),n("tr",[n("td",[t._v("controlBehavior")]),t._v(" "),n("td",[t._v("流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持")]),t._v(" "),n("td",[t._v("快速失败")])]),t._v(" "),n("tr",[n("td",[t._v("maxQueueingTimeMs")]),t._v(" "),n("td",[t._v("最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持")]),t._v(" "),n("td",[t._v("0ms")])]),t._v(" "),n("tr",[n("td",[t._v("paramIdx")]),t._v(" "),n("td",[t._v("热点参数的索引，必填，对应 "),n("code",[t._v("SphU.entry(xxx, args)")]),t._v(" 中的参数索引位置")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("paramFlowItemList")]),t._v(" "),n("td",[t._v("参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 "),n("code",[t._v("count")]),t._v(" 阈值的限制。"),n("strong",[t._v("仅支持基本类型和字符串类型")])]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("clusterMode")]),t._v(" "),n("td",[t._v("是否是集群参数流控规则")]),t._v(" "),n("td",[n("code",[t._v("false")])])]),t._v(" "),n("tr",[n("td",[t._v("clusterConfig")]),t._v(" "),n("td",[t._v("集群流控相关配置")]),t._v(" "),n("td")])])]),t._v(" "),n("p",[t._v("我们还可以通过 Sentinel 提供的"),n("code",[t._v("注解支持模块")]),t._v("来定义我们的资源，如下所示，helloWorld() 方法成了我们的一个资源：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('@SentinelResource("HelloWorld")\npublic void helloWorld() {\n    // 资源中的逻辑\n    System.out.println("hello world");\n}\n')])])]),n("p",[n("strong",[t._v("注：注解支持模块需要配合 Spring AOP 或者 AspectJ 一起使用。")])]),t._v(" "),n("p",[t._v("此时，我们已经实现了接口防刷和限流的功能，如果我们需要实时监控和管理限流规则，那么我们可以按如下步骤接入 Sentinel 开源控制台：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("下载控制台 jar 包并在本地启动")])]),t._v(" "),n("li",[n("p",[t._v("novel 项目引入 Transport 模块来与 Sentinel 控制台进行通信")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-transport-simple-http</artifactId>\n    <version>1.8.4</version>\n</dependency>\n")])])]),n("ul",[n("li",[t._v("novel 项目启动时加入 JVM 参数 -Dcsp.sentinel.dashboard.server=consoleIp:port 指定控制台地址和端口")]),t._v(" "),n("li",[t._v("确保 novel 项目有访问量")])]),t._v(" "),n("p",[t._v("完成以上步骤后即可在 Sentinel 控制台上看到对应的应用，机器列表页面可以看到对应的机器。")]),t._v(" "),n("h2",{attrs:{id:"集成-shardingsphere-jdbc-优化小说内容存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集成-shardingsphere-jdbc-优化小说内容存储"}},[t._v("#")]),t._v(" 集成 ShardingSphere-JDBC 优化小说内容存储")]),t._v(" "),n("h3",{attrs:{id:"背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),n("p",[t._v("传统的将数据集中存储至单一节点的解决方案，在性能、可用性和运维成本这三方面已经难于满足海量数据的场景。")]),t._v(" "),n("p",[t._v("从性能方面来说，由于关系型数据库大多采用 B+ 树类型的索引，在数据量超过阈值的情况下，索引深度的增加也将使得磁盘访问的 IO 次数增加，进而导致查询性能的下降； 同时，高并发访问请求也使得集中式数据库成为系统的最大瓶颈。")]),t._v(" "),n("p",[t._v("从可用性的方面来讲，服务化的无状态性，能够达到较小成本的随意扩容，这必然导致系统的最终压力都落在数据库之上。 而单一的数据节点，或者简单的主从架构，已经越来越难以承担。数据库的可用性，已成为整个系统的关键。")]),t._v(" "),n("p",[t._v("从运维成本方面考虑，当一个数据库实例中的数据达到阈值以上，对于 DBA 的运维压力就会增大。 数据备份和恢复的时间成本都将随着数据量的大小而愈发不可控。一般来讲，单一数据库实例的数据的阈值在 1TB 之内，是比较合理的范围。")]),t._v(" "),n("p",[t._v("数据分片指按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中以达到提升性能瓶颈以及可用性的效果。通过分库和分表进行数据的拆分来使得各个表的数据量保持在阈值以下，以及对流量进行疏导应对高访问量，是应对高并发和海量数据系统的有效手段。分库和分表均可以有效的避免由数据量超过可承受阈值而产生的查询瓶颈。")]),t._v(" "),n("p",[t._v("小说数据有着内容多、增长速度快的特点，一本主流的完结小说一般所需存储空间大概在 5MB 以上。一个主流的小说网站在发展中后期，数据量是远远超过单一数据库实例的阈值的，所以我们对小说内容进行分库分表存储是非常有必要的。在发展初期，我们的数据量还不是很大，可以先将小说内容分表存储以减轻数据库单表压力以及为后期的数据库分库做准备。等数据量即将超过阈值时，再迁移到不同的数据库实例上。")]),t._v(" "),n("p",[n("strong",[t._v("注：数据分片分为按照业务将表进行归类，分布到不同的数据库中的垂直分片和通过某个字段（或某几个字段）按照某种规则将数据分散至多个库或表中的水平分片。")])]),t._v(" "),n("h3",{attrs:{id:"apache-shardingsphere-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#apache-shardingsphere-介绍"}},[t._v("#")]),t._v(" Apache ShardingSphere 介绍")]),t._v(" "),n("p",[t._v("Apache ShardingSphere 产品定位为 Database Plus，它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。ShardingSphere 站在数据库的上层视角，关注他们之间的协作多于数据库自身，由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。")]),t._v(" "),n("p",[t._v("ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。")]),t._v(" "),n("p",[t._v("ShardingSphere-Proxy 定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。")]),t._v(" "),n("p",[t._v("ShardingSphere-Sidecar 定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的啮合层，即 Database Mesh，又可称数据库网格。")]),t._v(" "),n("p",[t._v("连接、增量 和 可插拔 是 Apache ShardingSphere 的核心概念：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("连接：通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速的连接应用与多模式的异构数据库；")])]),t._v(" "),n("li",[n("p",[t._v("增量：获取数据库的访问流量，并提供流量重定向（数据分片、读写分离、影子库）、流量变形（数据加密、数据脱敏）、流量鉴权（安全、审计、权限）、流量治理（熔断、限流）以及流量分析（服务质量分析、可观察性）等透明化增量功能；")])]),t._v(" "),n("li",[n("p",[t._v("可插拔：项目采用微内核 + 三层可插拔模型，使内核、功能组件以及生态对接完全能够灵活的方式进行插拔式扩展，开发者能够像使用积木一样定制属于自己的独特系统。")])])]),t._v(" "),n("p",[t._v("Apache ShardingSphere 的数据分片模块透明化了分库分表所带来的影响，让使用方尽量像使用一个数据库一样使用水平分片之后的数据库集群。")]),t._v(" "),n("h3",{attrs:{id:"集成步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集成步骤"}},[t._v("#")]),t._v(" 集成步骤")]),t._v(" "),n("ol",[n("li",[t._v("MySQL 执行以下的数据迁移脚本：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("DROP PROCEDURE\nIF\n\tEXISTS createBookChapterTable;\n-- 创建小说章节表的存储过程\nCREATE PROCEDURE createBookChapterTable ( ) BEGIN\n\t-- 定义变量\n\tDECLARE\n\t\ti INT DEFAULT 0;\n\tDECLARE\n\t\ttableName CHAR ( 13 ) DEFAULT NULL;\n\tWHILE\n\t\t\ti < 10 DO\n\t\t\t\n\t\t\tSET tableName = concat( 'book_chapter', i );\n\t\t\n\t\t\tSET @stmt = concat( 'create table ', tableName, '(\n\t\t\t\t`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n\t\t\t\t`book_id` bigint(20) unsigned NOT NULL COMMENT \\'小说ID\\',\n\t\t\t\t`chapter_num` smallint(5) unsigned NOT NULL COMMENT \\'章节号\\',\n\t\t\t\t`chapter_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT \\'章节名\\',\n\t\t\t\t`word_count` int(10) unsigned NOT NULL COMMENT \\'章节字数\\',\n\t\t\t\t`is_vip` tinyint(3) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'是否收费;1-收费 0-免费\\',\n\t\t\t\t`create_time` datetime DEFAULT NULL,\n\t\t\t\t`update_time` datetime DEFAULT NULL,\n\t\t\t\tPRIMARY KEY (`id`) USING BTREE,\n\t\t\t\tUNIQUE KEY `uk_bookId_chapterNum` (`book_id`,`chapter_num`) USING BTREE,\n\t\t\t\tUNIQUE KEY `pk_id` (`id`) USING BTREE,\n\t\t\t\tKEY `idx_bookId` (`book_id`) USING BTREE\n\t\t\t) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\\'小说章节\\'' );\n\t\t\tPREPARE stmt \n\t\t\tFROM\n\t\t\t\t@stmt;\n\t\t\tEXECUTE stmt;\n\t\t\tDEALLOCATE PREPARE stmt;\n\t\t\t\n\t\t\tSET i = i + 1;\n\t\t\n\tEND WHILE;\nEND;\nCALL createBookChapterTable ( );\n\nDROP PROCEDURE\nIF\n\tEXISTS createBookContentTable;\n-- 创建小说内容表的存储过程\nCREATE PROCEDURE createBookContentTable ( ) BEGIN\n\t-- 定义变量\n\tDECLARE\n\t\ti INT DEFAULT 0;\n\tDECLARE\n\t\ttableName CHAR ( 13 ) DEFAULT NULL;\n\tWHILE\n\t\t\ti < 10 DO\n\t\t\t\n\t\t\tSET tableName = concat( 'book_content', i );\n\t\t\n\t\t\tSET @stmt = concat( 'create table ', tableName, '(\n\t\t\t\t`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT \\'主键\\',\n\t\t\t\t`chapter_id` bigint(20) unsigned NOT NULL COMMENT \\'章节ID\\',\n\t\t\t\t`content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT \\'小说章节内容\\',\n\t\t\t\t`create_time` datetime DEFAULT NULL,\n\t\t\t\t`update_time` datetime DEFAULT NULL,\n\t\t\t\tPRIMARY KEY (`id`) USING BTREE,\n\t\t\t\tUNIQUE KEY `uk_chapterId` (`chapter_id`) USING BTREE,\n\t\t\t\tUNIQUE KEY `pk_id` (`id`) USING BTREE\n\t\t\t) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\\'小说内容\\'' );\n\t\t\tPREPARE stmt \n\t\t\tFROM\n\t\t\t\t@stmt;\n\t\t\tEXECUTE stmt;\n\t\t\tDEALLOCATE PREPARE stmt;\n\t\t\t\n\t\t\tSET i = i + 1;\n\t\t\n\tEND WHILE;\nEND;\nCALL createBookContentTable ( );\n\nDROP PROCEDURE\nIF\n\tEXISTS copyBookChapterData;\n-- 迁移小说章节数据的存储过程\nCREATE PROCEDURE copyBookChapterData ( ) BEGIN\n\t-- 定义变量\n\tDECLARE\n\t\ts INT DEFAULT 0;\n\tDECLARE\n\t\tchapterId BIGINT;\n\tDECLARE\n\t\tbookId BIGINT;\n\tDECLARE\n\t\tchapterNum SMALLINT;\n\tDECLARE\n\t\tchapterName VARCHAR ( 100 );\n\tDECLARE\n\t\twordCount INT DEFAULT 0;\n\tDECLARE\n\t\tisVip TINYINT ( 64 ) DEFAULT 0;\n\tDECLARE\n\t\tcreateTime datetime DEFAULT NULL;\n\tDECLARE\n\t\tupdateTime datetime DEFAULT NULL;\n\tDECLARE\n\t\ttableNumber INT DEFAULT 0;\n\tDECLARE\n\t\ttableName CHAR ( 13 ) DEFAULT NULL;\n\t-- 定义游标\n\tDECLARE\n\t\treport CURSOR FOR SELECT\n\t\tid,\n\t\tbook_id,\n\t\tchapter_num,\n\t\tchapter_name,\n\t\tword_count,\n\t\tis_vip,\n\t\tcreate_time,\n\t\tupdate_time \n\tFROM\n\t\tbook_chapter;\n\t-- 声明当游标遍历完后将标志变量置成某个值\n\tDECLARE\n\t\tCONTINUE HANDLER FOR NOT FOUND \n\t\tSET s = 1;\n\t-- 打开游标\n\tOPEN report;\n\t-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致\n\tFETCH report INTO chapterId,\n\tbookId,\n\tchapterNum,\n\tchapterName,\n\twordCount,\n\tisVip,\n\tcreateTime,\n\tupdateTime;\n\t-- 循环遍历\n\tWHILE\n\t\t\ts <> 1 DO\n\t\t\t-- 执行业务逻辑\n\t\t\t\n\t\t\tSET tableNumber = bookId % 10;\n\t\t\n\t\t\tSET tableName = concat( 'book_chapter', tableNumber );\n\t\t\t\n\t\t\tSET @stmt = concat(\n\t\t\t\t'insert into ',\n\t\t\t\ttableName,\n\t\t\t\t'(`id`, `book_id`, `chapter_num`, `chapter_name`, `word_count`, `is_vip`, `create_time`, `update_time`) VALUES (',\n\t\t\t\tchapterId,\n\t\t\t\t', ',\n\t\t\t\tbookId,\n\t\t\t\t', ',\n\t\t\t\tchapterNum,\n\t\t\t\t', \\'',\n\t\t\t\tchapterName,\n\t\t\t\t'\\', ',\n\t\t\t\twordCount,\n\t\t\t\t', ',\n\t\t\t\tisVip,\n\t\t\t\t', \\'',\n\t\t\t\tcreateTime,\n\t\t\t\t'\\', \\'',\n\t\t\t\tupdateTime,\n\t\t\t\t'\\')' \n\t\t\t);\n\t\t\tPREPARE stmt \n\t\t\tFROM\n\t\t\t\t@stmt;\n\t\t\tEXECUTE stmt;\n\t\t\tDEALLOCATE PREPARE stmt;\n\t\t\tFETCH report INTO chapterId,\n\t\t\tbookId,\n\t\t\tchapterNum,\n\t\t\tchapterName,\n\t\t\twordCount,\n\t\t\tisVip,\n\t\t\tcreateTime,\n\t\t\tupdateTime;\n\t\t\n\tEND WHILE;\n\t-- 关闭游标\n\tCLOSE report;\nEND;\nCALL copyBookChapterData ( );\n\nDROP PROCEDURE\nIF\n\tEXISTS copyBookContentData;\n-- 迁移小说内容数据的存储过程\nCREATE PROCEDURE copyBookContentData ( ) BEGIN\n\t-- 定义变量\n\tDECLARE\n\t\ts INT DEFAULT 0;\n\tDECLARE\n\t\tcontentId BIGINT;\n\tDECLARE\n\t\tchapterId BIGINT;\n\tDECLARE\n\t\tbookContent MEDIUMTEXT;\n\tDECLARE\n\t\tcreateTime datetime DEFAULT NULL;\n\tDECLARE\n\t\tupdateTime datetime DEFAULT NULL;\n\tDECLARE\n\t\ttableNumber INT DEFAULT 0;\n\tDECLARE\n\t\ttableName CHAR ( 13 ) DEFAULT NULL;\n\t-- 定义游标\n\tDECLARE\n\t\treport CURSOR FOR SELECT\n\t\tid,\n\t\tchapter_id,\n\t\tcontent,\n\t\tcreate_time,\n\t\tupdate_time \n\tFROM\n\t\tbook_content;\n\t-- 声明当游标遍历完后将标志变量置成某个值\n\tDECLARE\n\t\tCONTINUE HANDLER FOR NOT FOUND \n\t\tSET s = 1;\n\t-- 打开游标\n\tOPEN report;\n\t-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致\n\tFETCH report INTO contentId,\n\tchapterId,\n\tbookContent,\n\tcreateTime,\n\tupdateTime;\n\t-- 循环遍历\n\tWHILE\n\t\t\ts <> 1 DO\n\t\t\t-- 执行业务逻辑\n\t\t\t\n\t\t\tSET tableNumber = chapterId % 10;\n\t\t\n\t\t\tSET tableName = concat( 'book_content', tableNumber );\n\t\t\t\n\t\t\tSET bookContent = REPLACE ( bookContent, '\\'', \"\\\\'\" );\n\t\t\t\n\t\t\tSET @stmt = concat(\n\t\t\t\t'insert into ',\n\t\t\t\ttableName,\n\t\t\t\t'(`id`, `chapter_id`, `content`) VALUES (',\n\t\t\t\tcontentId,\n\t\t\t\t', ',\n\t\t\t\tchapterId,\n\t\t\t\t',\\'',\n\t\t\t\tbookContent,\n\t\t\t\t'\\')' \n\t\t\t);\n\t\t\tPREPARE stmt \n\t\t\tFROM\n\t\t\t\t@stmt;\n\t\t\tEXECUTE stmt;\n\t\t\tDEALLOCATE PREPARE stmt;\n\t\t\tFETCH report INTO contentId,\n\t\t\tchapterId,\n\t\t\tbookContent,\n\t\t\tcreateTime,\n\t\t\tupdateTime;\n\t\t\n\tEND WHILE;\n\t-- 关闭游标\n\tCLOSE report;\nEND;\nCALL copyBookContentData ( );\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("引入 ShardingSphere-JDBC 官方提供的 Spring Boot Starter 依赖：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<dependency>\n    <groupId>org.apache.shardingsphere</groupId>\n    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>\n    <version>5.1.1</version>\n</dependency>\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("application.yml 中添加 ShardingSphere-JDBC 的配置：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("spring:\n  shardingsphere:\n    # 是否开启 shardingsphere\n    enabled: false\n    props:\n      # 是否在日志中打印 SQL\n      sql-show: true\n    # 模式配置\n    mode:\n      # 单机模式\n      type: Standalone\n      repository:\n        # 文件持久化\n        type: File\n        props:\n          # 元数据存储路径\n          path: .shardingsphere\n      # 使用本地配置覆盖持久化配置\n      overwrite: true\n    # 数据源配置\n    datasource:\n      names: ds_0\n      ds_0:\n        type: com.zaxxer.hikari.HikariDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        jdbcUrl: jdbc:mysql://localhost:3306/novel_test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai\n        username: root\n        password: test123456\n    # 规则配置\n    rules:\n      # 数据分片\n      sharding:\n        tables:\n          # book_content 表\n          book_content:\n            # 数据节点\n            actual-data-nodes: ds_$->{0}.book_content$->{0..9}\n            # 分表策略\n            table-strategy:\n              standard:\n                # 分片列名称\n                sharding-column: chapter_id\n                # 分片算法名称\n                sharding-algorithm-name: bookContentSharding\n        sharding-algorithms:\n          bookContentSharding:\n            # 行表达式分片算法，使用 Groovy 的表达式，提供对 SQL 语句中的 = 和 IN 的分片操作支持\n            type: INLINE\n            props:\n              # 分片算法的行表达式\n              algorithm-expression: book_content$->{chapter_id % 10}\n")])])]),n("p",[t._v("配置是 ShardingSphere-JDBC 中唯一与应用开发者交互的模块，通过它可以快速清晰的理解 ShardingSphere-JDBC 所提供的功能。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("模式配置： Apache ShardingSphere 提供的 3 种运行模式分别是适用于集成测试的环境启动，方便开发人员在整合功能测试中集成 Apache ShardingSphere 而无需清理运行痕迹"),n("code",[t._v("内存模式")]),t._v("、能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知的"),n("code",[t._v("单机模式")]),t._v("和提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调能力的"),n("code",[t._v("集群模式")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("数据源配置：包括使用本地数据源配置（本项目中）和使用 JNDI 数据源的配置。如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时， 可使用 spring.shardingsphere.datasource.${datasourceName}.jndiName 来代替数据源的一系列配置。")])]),t._v(" "),n("li",[n("p",[t._v("规则配置：规则是 Apache ShardingSphere 面向可插拔的一部分，包括数据分片、读写分离、高可用、数据加密、影子库、SQL 解析、混合规则等。")])])]),t._v(" "),n("p",[t._v("以下是数据分片的配置项说明：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 标准分片表配置\nspring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况\n\n# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一\n\n# 用于单分片键的标准分片场景\nspring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称\nspring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称\n\n# 用于多分片键的复合分片场景\nspring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔\nspring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # 分片算法名称\n\n# 用于 Hint 的分片策略\nspring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # 分片算法名称\n\n# 分表策略，同分库策略\nspring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略\n\n# 自动分片表配置\nspring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名\n\nspring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称\nspring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm-name= # 自动分片算法名称\n\n# 分布式序列策略配置\nspring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称\nspring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称\n\nspring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表\nspring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表\nspring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表\n\nspring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表\nspring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表\nspring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表\n\nspring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略\nspring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略\nspring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略\nspring.shardingsphere.sharding.default-sharding-column= # 默认分片列名称\n\n# 分片算法配置\nspring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型\nspring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # 分片算法属性配置\n\n# 分布式序列算法配置\nspring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型\nspring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置\n")])])]),n("p",[t._v("其中，分片算法分为包含取模分片、哈希取模分片、基于分片容量的范围分片、基于分片边界的范围分片、自动时间段分片在内的"),n("code",[t._v("自动分片算法")]),t._v("和包含行表达式分片、时间范围分片在内的"),n("code",[t._v("标准分片算法")]),t._v("以及"),n("code",[t._v("复合分片算法")]),t._v("和"),n("code",[t._v("Hint 分片算法")]),t._v("。我们还可以自定义类分片算法，通过配置分片策略类型和算法类名，实现自定义扩展。")]),t._v(" "),n("p",[t._v("分布式序列算法包括雪花算法和 UUID。")]),t._v(" "),n("h2",{attrs:{id:"集成-spring-boot-admin-实现应用管理和监控功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集成-spring-boot-admin-实现应用管理和监控功能"}},[t._v("#")]),t._v(" 集成 Spring Boot Admin 实现应用管理和监控功能")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-actuator-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-actuator-介绍"}},[t._v("#")]),t._v(" Spring Boot Actuator 介绍")]),t._v(" "),n("p",[t._v("当我们将应用程序投入生产时，Spring Boot 包含了许多可以帮助我们对其进行监控和管理的"),n("code",[t._v("生产就绪功能")]),t._v("，我们可以选择使用 HTTP 端点或 JMX 来管理和监控我们的应用程序。")]),t._v(" "),n("p",[t._v("Spring Boot Actuator 模块提供了 Spring Boot 的所有"),n("code",[t._v("生产就绪功能")]),t._v("，我们通过添加 spring-boot-starter-actuator "),n("code",[t._v("Starter")]),t._v("依赖来启用这些功能。")]),t._v(" "),n("p",[n("code",[t._v("端点")]),t._v("（endpoints）让我们可以监控应用程序并与之交互。Spring Boot 包含许多内置端点，并允许我们添加自己的端点。例如，health 端点提供基本的应用程序健康信息。我们可以单独"),n("code",[t._v("启用")]),t._v("或"),n("code",[t._v("禁用")]),t._v("每一个端点并通过 HTTP 或 JMX "),n("code",[t._v("公开")]),t._v("它们（使它们可以远程访问）。当端点被"),n("code",[t._v("启用")]),t._v("和"),n("code",[t._v("公开")]),t._v("时，它被认为是"),n("code",[t._v("可用")]),t._v("的，内置端点仅在可用时才会自动配置。")]),t._v(" "),n("p",[t._v("大多数应用程序选择通过 HTTP 公开端点，其中端点的 ID 和前缀 /actuator 被映射到一个 URL 地址。例如，默认情况下，health 端点映射到 /actuator/health。")]),t._v(" "),n("p",[t._v("默认情况下，除了 shutdown 之外的所有端点都是启用的，如果要配置一个端点的启用，需要使用 "),n("code",[t._v("management.endpoint.<id>.enabled")]),t._v(" 配置属性。")]),t._v(" "),n("p",[t._v("由于端点可能包含敏感信息，我们应该仔细考虑何时公开它们。下表显示了内置端点的默认公开情况：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("ID")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("JMX")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("Web")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("auditevents")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("beans")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("caches")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("conditions")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("configprops")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("env")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("flyway")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("health")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("heapdump")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("httptrace")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("info")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("integrationgraph")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("jolokia")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("logfile")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("loggers")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("liquibase")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("metrics")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("mappings")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("prometheus")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("quartz")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("scheduledtasks")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("sessions")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("shutdown")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("startup")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("threaddump")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("No")])])])]),t._v(" "),n("p",[t._v("如果想要更改公开的端点，可以使用以下特定技术的 "),n("code",[t._v("include")]),t._v("和"),n("code",[t._v("exclude")]),t._v("配置属性：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("Property")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("Default")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("management.endpoints.jmx.exposure.exclude")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("management.endpoints.jmx.exposure.include")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("*")])])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("management.endpoints.web.exposure.exclude")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("management.endpoints.web.exposure.include")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("health")])])])])]),t._v(" "),n("p",[t._v("include 属性列出需要公开的端点 ID。exclude 属性列出不应公开的端点 ID，exclude 优先于 include。我们还可以使用端点 ID 列表来配置 include 和 exclude 属性。")]),t._v(" "),n("p",[n("code",[t._v("应用程序信息")]),t._v("（Application Information）公开了 ApplicationContext 中定义的所有 InfoContributor bean 收集的各种信息。 Spring Boot 包含许多自动配置的 InfoContributor bean，我们也可以编写自己的 InfoContributor bean。")]),t._v(" "),n("p",[t._v("在适当的时候，Spring Boot 会自动配置以下的 InfoContributor bean：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("ID")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("Bean")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("先决条件")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("build")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/BuildInfoContributor.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("BuildInfoContributor")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("公开构建信息")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("资源文件"),n("code",[t._v("META-INF/build-info.properties")]),t._v(" 存在")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("env")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("EnvironmentInfoContributor")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("公开所有以 "),n("code",[t._v("info.")]),t._v("开头的环境属性")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("无")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("git")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("GitInfoContributor")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("公开 git 信息")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("资源文件"),n("code",[t._v("git.properties")]),t._v(" 存在")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("java")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/JavaInfoContributor.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("JavaInfoContributor")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("公开 Java 运行时信息")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("无")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("os")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/OsInfoContributor.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("OsInfoContributor")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("公开操作系统信息")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("无")])])])]),t._v(" "),n("p",[n("code",[t._v("management.info.<id>.enabled")]),t._v(" 属性控制单个 InfoContributor bean 是否启用，不同的 InfoContributor bean 对此属性有不同的默认值，这取决于它们的先决条件和它们公开信息的性质。默认情况下 env、java 和 os 被禁用，我们可以通过将其 "),n("code",[t._v("management.info.<id>.enabled")]),t._v(" 属性设置为 true 来开启。build 和 git 默认是开启的，我们可以通过将其 "),n("code",[t._v("management.info.<id>.enabled")]),t._v(" 属性设置为 false 来禁用。")]),t._v(" "),n("p",[n("code",[t._v("健康信息")]),t._v("（Health Information）可以用来检查正在运行的应用程序状态。当生产系统出现故障时，监控软件经常使用它来提醒某人。")]),t._v(" "),n("p",[t._v("健康信息是从 HealthContributorRegistry 的内容中收集的（默认情况下，所有在 ApplicationContext 中定义的 HealthContributor 实例）。 Spring Boot 包含许多自动配置的 HealthContributor，我们也可以编写自己的。")]),t._v(" "),n("p",[t._v("在适当的时候，Spring Boot 会自动配置以下的 HealthIndicator bean：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("Bean")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("cassandra")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraDriverHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("CassandraDriverHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Cassandra 数据库是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("couchbase")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("CouchbaseHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Couchbase 集群是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("db")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("DataSourceHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查是否可以获得"),n("code",[t._v("DataSource")]),t._v("连接。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("diskspace")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/DiskSpaceHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("DiskSpaceHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查磁盘空间是否不足。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("elasticsearch")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("ElasticsearchRestHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Elasticsearch 集群是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("hazelcast")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/hazelcast/HazelcastHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("HazelcastHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Hazelcast 服务是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("influxdb")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/influx/InfluxDbHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("InfluxDbHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 InfluxDB 服务是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("jms")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jms/JmsHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("JmsHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 JMS 代理是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("ldap")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/ldap/LdapHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("LdapHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 LDAP 服务是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("mail")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mail/MailHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("MailHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查邮件服务是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("mongo")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mongo/MongoHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("MongoHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Mongo 数据库是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("neo4j")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Neo4jHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Neo4j 数据库是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("ping")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/PingHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("PingHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("始终以 "),n("code",[t._v("UP")]),t._v("响应。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("rabbit")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/amqp/RabbitHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("RabbitHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Rabbit 服务是否已启动。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[t._v("redis")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("a",{attrs:{href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/redis/RedisHealthIndicator.java",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("RedisHealthIndicator")]),n("OutboundLink")],1)]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("检查 Redis 服务是否已启动。")])])])]),t._v(" "),n("p",[t._v("我们可以通过 "),n("code",[t._v("management.health.<key>.enabled")]),t._v(" 配置来启用或禁用选定的健康检查。")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-admin-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-admin-介绍"}},[t._v("#")]),t._v(" Spring Boot Admin 介绍")]),t._v(" "),n("p",[t._v("Spring Boot Admin 是一个用于管理和监控我们 Spring Boot 应用程序的开源项目，由服务端（Spring Boot Admin Server）和客户端（Spring Boot Admin Client）两部分构成。")]),t._v(" "),n("p",[t._v("应用程序使用 Spring Boot Admin Client（通过 HTTP）或使用 Spring Cloud 自动发现（例如 Eureka、Consul、Nacos 等）向 Spring Boot Admin Server 注册。")]),t._v(" "),n("p",[t._v("Spring Boot Admin Server UI 是构建在 Spring Boot Actuator 端点之上的 Vue.js 应用程序，Spring Boot Admin Server 的监控信息均来自 Spring Boot Actuator 端点，并且通过端点来管理我们的应用程序。")]),t._v(" "),n("h3",{attrs:{id:"构建-spring-boot-admin-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建-spring-boot-admin-server"}},[t._v("#")]),t._v(" 构建 Spring Boot Admin Server")]),t._v(" "),n("ol",[n("li",[t._v("使用 "),n("a",{attrs:{href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Initializr"),n("OutboundLink")],1),t._v(" 初始化一个 Spring Boot 项目，并加入以下依赖和仓库：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-server</artifactId>\n    <version>3.0.0-M1</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n\n\n<repositories>\n    <repository>\n        <id>spring-milestone</id>\n        <snapshots>\n            <enabled>false</enabled>\n        </snapshots>\n        <url>http://repo.spring.io/milestone</url>\n    </repository>\n    <repository>\n        <id>spring-snapshot</id>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n        <url>http://repo.spring.io/snapshot</url>\n    </repository>\n    <repository>\n        <id>sonatype-nexus-snapshots</id>\n        <name>Sonatype Nexus Snapshots</name>\n        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n        <releases>\n            <enabled>false</enabled>\n        </releases>\n    </repository>\n</repositories>\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("在 application.properties 配置文件中添加 Spring Security 用户名、密码的配置属性，用于登录 Spring Boot Admin Server：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("spring.security.user.name=novel\nspring.security.user.password=novel\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("在启动类上添加 @EnableAdminServer 注解：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@SpringBootApplication\n@EnableAdminServer\npublic class MonitorApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MonitorApplication.class, args);\n\t}\n\n}\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("添加 Spring Security 配置类：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * Spring Security 配置\n *\n * @author xiongxiaoyang\n * @date 2022/6/8\n */\n@Configuration(proxyBeanMethods = false)\npublic class SecuritySecureConfig extends WebSecurityConfigurerAdapter {\n\n    private final AdminServerProperties adminServer;\n\n    private final SecurityProperties security;\n\n    public SecuritySecureConfig(AdminServerProperties adminServer, SecurityProperties security) {\n        this.adminServer = adminServer;\n        this.security = security;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();\n        successHandler.setTargetUrlParameter("redirectTo");\n        successHandler.setDefaultTargetUrl(this.adminServer.path("/"));\n\n        http.authorizeRequests(\n                        authorizeRequests -> authorizeRequests\n                                .antMatchers(this.adminServer.path("/assets/**")).permitAll()\n                                .antMatchers(this.adminServer.path("/actuator/info")).permitAll()\n                                .antMatchers(this.adminServer.path("/actuator/health")).permitAll()\n                                .antMatchers(this.adminServer.path("/login")).permitAll()\n                                .anyRequest().authenticated()\n                ).formLogin(\n                        formLogin -> formLogin\n                                .loginPage(this.adminServer.path("/login"))\n                                .successHandler(successHandler).and()\n                ).logout(\n                        logout -> logout.logoutUrl(this.adminServer.path("/logout"))\n                ).httpBasic(Customizer.withDefaults())\n                .csrf(csrf -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                        .ignoringRequestMatchers(\n                                new AntPathRequestMatcher(this.adminServer.path("/instances"),\n                                        HttpMethod.POST.toString()),\n                                new AntPathRequestMatcher(this.adminServer.path("/instances/*"),\n                                        HttpMethod.DELETE.toString()),\n                                new AntPathRequestMatcher(this.adminServer.path("/actuator/**"))\n                        ))\n                .rememberMe(rememberMe -> rememberMe\n                        .key(UUID.randomUUID().toString())\n                        .tokenValiditySeconds(1209600));\n    }\n\n    /**\n     * Required to provide UserDetailsService for "remember functionality"\n     * */\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication().withUser(security.getUser().getName())\n                .password("{noop}" + security.getUser().getPassword()).roles("USER");\n    }\n\n}\n')])])]),n("p",[t._v("此时，运行应用程序，浏览器中访问 8080 端口，输入上面配置的用户名和密码即可进入 Spring Boot Admin Server 控制台管理和监控我们的应用程序。")]),t._v(" "),n("h3",{attrs:{id:"通过-spring-boot-admin-client-注册-novel-服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过-spring-boot-admin-client-注册-novel-服务"}},[t._v("#")]),t._v(" 通过 Spring Boot Admin Client 注册 novel 服务")]),t._v(" "),n("ol",[n("li",[t._v("在我们 novel 项目中加入以下依赖和仓库：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n    <version>3.0.0-M1</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n\n\n<repository>\n    <id>sonatype-nexus-snapshots</id>\n    <name>Sonatype Nexus Snapshots</name>\n    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n    <snapshots>\n        <enabled>true</enabled>\n    </snapshots>\n    <releases>\n        <enabled>false</enabled>\n    </releases>\n</repository>\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("在 novel 项目的 application.yml 配置文件中加入以下配置：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('spring:\n  # Spring Boot 应用管理和监控\n  boot:\n    admin:\n      client:\n        # 是否开启 Spring Boot Admin 客户端\n        enabled: true\n        # Spring Boot Admin 服务端注册地址\n        url: http://localhost:8080\n        # Spring Boot Admin 服务端认证用户名\n        username: novel\n        # Spring Boot Admin 服务端认证密码\n        password: novel\n        instance:\n          metadata:\n            # SBA Client\n            user.name: ${spring.security.user.name}\n            user.password: ${spring.security.user.password}\n  security:\n    user:\n      # Actuator 端点保护配置\n      name: ENDPOINT_ADMIN\n      password: ENDPOINT_ADMIN\n      roles: ENDPOINT_ADMIN\n\n# Actuator 端点管理\nmanagement:\n  # 端点公开配置\n  endpoints:\n    # 通过 HTTP 公开的 Web 端点\n    web:\n      exposure:\n        # 公开所有的 Web 端点\n        include: "*"\n\n  # 端点启用配置\n  endpoint:\n    logfile:\n      # 启用返回日志文件内容的端点\n      enabled: true\n      # 外部日志文件路径\n      external-file: logs/novel.log\n\n  info:\n    env:\n      # 公开所有以 info. 开头的环境属性\n      enabled: true\n  health:\n    rabbit:\n      # 关闭 rabbitmq 的健康检查\n      enabled: false\n    elasticsearch:\n      # 关闭 elasticsearch 的健康检查\n      enabled: false\n\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("novel 项目启动类中添加 Spring Boot Actuator 端点保护的 Spring Security 配置：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('@Bean\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n    http.csrf().disable()\n            .requestMatcher(EndpointRequest.toAnyEndpoint())\n            .authorizeRequests(requests -> requests.anyRequest().hasRole("ENDPOINT_ADMIN"));\n    http.httpBasic();\n    return http.build();\n}\n')])])]),n("p",[t._v("此时，启动 novel 项目，登录 Spring Boot Admin Server 控制台可以看到如下监控信息：")]),t._v(" "),n("p",[n("img",{attrs:{src:"/img/novel/springbootadmin1.png",alt:"Spring Boot Admin"}}),t._v(" "),n("img",{attrs:{src:"/img/novel/springbootadmin2.png",alt:"Spring Boot Admin"}}),t._v(" "),n("img",{attrs:{src:"/img/novel/springbootadmin3.png",alt:"Spring Boot Admin"}}),t._v(" "),n("img",{attrs:{src:"/img/novel/springbootadmin4.png",alt:"Spring Boot Admin"}}),t._v(" "),n("img",{attrs:{src:"/img/novel/springbootadmin5.png",alt:"Spring Boot Admin"}})]),t._v(" "),n("p",[t._v("踩坑：在启动 Spring Boot Admin Server 之前有个 node 程序监听了 8080 端口没有释放，然后启动 Spring Boot Admin Server（默认也是 8080 端口），此时浏览器中可以正常访问到 Spring Boot Admin Server 的界面，但是 novel 服务无法注册到 Spring Boot Admin Server 上，提示404 错误。后来发现 novel 服务的注册被监听 8080 端口的 node 程序处理了，关闭该 node 程序即可正常注册。 该机制请参考 "),n("a",{attrs:{href:"https://segmentfault.com/a/1190000014701988",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.Js 的端口重用"),n("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);e.default=r.exports}}]);