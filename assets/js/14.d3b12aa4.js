(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{521:function(e,n,t){"use strict";t.r(n);var a=t(21),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"项目开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目开发"}},[e._v("#")]),e._v(" 项目开发")]),e._v(" "),t("h2",{attrs:{id:"开发环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发环境"}},[e._v("#")]),e._v(" 开发环境")]),e._v(" "),t("ul",[t("li",[e._v("MySQL 8.0")]),e._v(" "),t("li",[e._v("Redis 7.0")]),e._v(" "),t("li",[e._v("Elasticsearch 8.2.0（选装）")]),e._v(" "),t("li",[e._v("RabbitMQ 3.10.2（选装）")]),e._v(" "),t("li",[e._v("XXL-JOB 2.3.1（选装）")]),e._v(" "),t("li",[e._v("JDK 17")]),e._v(" "),t("li",[e._v("Maven 3.8.5")]),e._v(" "),t("li",[e._v("IntelliJ IDEA 2021.3")]),e._v(" "),t("li",[e._v("Node 16.14")])]),e._v(" "),t("h2",{attrs:{id:"idea-插件安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idea-插件安装"}},[e._v("#")]),e._v(" IDEA 插件安装")]),e._v(" "),t("p",[e._v("使用 IntelliJ IDEA 开发的同学建议安装以下插件：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("必装")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Alibaba Java Code Guidelines - 阿里巴巴 Java 代码规范")])]),e._v(" "),t("li",[t("p",[e._v("SonarLint - 代码质量检测")])]),e._v(" "),t("li",[t("p",[e._v("Save Actions - 代码自动格式化（"),t("RouterLink",{attrs:{to:"/course/novel/12.html#java-代码格式"}},[e._v("Java 代码格式")]),e._v("）")],1)]),e._v(" "),t("li",[t("p",[e._v("Git Commit Template - 使用规范模板创建 Git 提交消息（"),t("RouterLink",{attrs:{to:"/course/novel/12.html#git-提交规约"}},[e._v("Git 提交规范")]),e._v("）")],1)])])]),e._v(" "),t("li",[t("p",[e._v("选装")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Translation - 翻译插件")])]),e._v(" "),t("li",[t("p",[e._v("Maven Helper - 分析 Maven 依赖，解决 Jar 冲突")])]),e._v(" "),t("li",[t("p",[e._v("EasyYapi - 帮助你导出文件中的 API 到 "),t("code",[e._v("yapi")]),e._v("/"),t("code",[e._v("postman")]),e._v("/"),t("code",[e._v("markdown")]),e._v(" 或发起文件中的 API 请求")])]),e._v(" "),t("li",[t("p",[e._v("Codota - 代码智能提示")])]),e._v(" "),t("li",[t("p",[e._v("Search In Repository - 搜索 Maven 或者 NPM 的依赖信息")])]),e._v(" "),t("li",[t("p",[e._v("CamelCase - 多种命名格式（下划线、驼峰等）之间切换")])]),e._v(" "),t("li",[t("p",[e._v("Auto filling Java call arguments - 自动补全调用函数的参数")])]),e._v(" "),t("li",[t("p",[e._v("GenerateO2O - 生成一个对象并自动填充另一个对象的值")])]),e._v(" "),t("li",[t("p",[e._v("GenerateAllSetter - 一键调用一个对象的所有的set方法")])]),e._v(" "),t("li",[t("p",[e._v("SequenceDiagram - 调用链路自动生成时序图")])]),e._v(" "),t("li",[t("p",[e._v("Rainbow Brackets - 让你的括号变成不一样的颜色，防止错乱括号")])]),e._v(" "),t("li",[t("p",[e._v("HighlightBracketPair - 括号开始和结尾，高亮显示")])]),e._v(" "),t("li",[t("p",[e._v("Grep Console - 控制台日志 高亮")])]),e._v(" "),t("li",[t("p",[e._v("Key promoter X - 鼠标操作的快捷键提示")])]),e._v(" "),t("li",[t("p",[e._v("CodeGlance - 缩略图")])]),e._v(" "),t("li",[t("p",[e._v("VisualGC - 实时垃圾回收监控")])]),e._v(" "),t("li",[t("p",[e._v("arthas idea - java 在线诊断工具")])]),e._v(" "),t("li",[t("p",[e._v("Alibaba Cloud Toolkit - 通过图形配置的方式连接到云端部署环境并将应用程序快速部署到云端")])])])]),e._v(" "),t("li",[t("p",[e._v("上班摸鱼")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Leetcode Editor IDEA 在线刷题")])]),e._v(" "),t("li",[t("p",[e._v("GIdeaBrowser IDEA 内嵌 Web 浏览器")])])])])]),e._v(" "),t("h2",{attrs:{id:"项目初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目初始化"}},[e._v("#")]),e._v(" 项目初始化")]),e._v(" "),t("p",[e._v("我们使用 Spring Initializr 来初始化我们的项目。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/springbootinit.png",alt:"Spring Initializr"}})]),e._v(" "),t("p",[e._v("操作步骤如下：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("导航到 "),t("a",{attrs:{href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Initializr"),t("OutboundLink")],1),e._v("。该服务引入应用程序所需的所有依赖项，并自动完成大部分设置。")])]),e._v(" "),t("li",[t("p",[e._v("选择 Gradle 或 Maven 以及要使用的语言。本项目选择 Maven 和 Java。")])]),e._v(" "),t("li",[t("p",[e._v("选择 Spring Boot 的版本。本项目选择 3.0.0-SNAPSHOT 版本。")])]),e._v(" "),t("li",[t("p",[e._v("填写项目元数据。本项目选择 Java 17 版本。")])]),e._v(" "),t("li",[t("p",[e._v("单击 ADD DEPENDENCIES 并选择项目依赖项。本项目选择的依赖如上图所示。")])]),e._v(" "),t("li",[t("p",[e._v("单击 GENERATE，下载生成的 ZIP 文件，该文件是根据我们的选择来配置的 Spring Boot 应用程序存档。")])]),e._v(" "),t("li",[t("p",[e._v("解压 ZIP 文件后导入我们的 IDE 中即可。")])])]),e._v(" "),t("p",[t("strong",[e._v("注：如果我们的 IDE 具有 Spring Initializr 集成，可以直接从 IDE 中完成此过程")])]),e._v(" "),t("h2",{attrs:{id:"项目配置和框架集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目配置和框架集成"}},[e._v("#")]),e._v(" 项目配置和框架集成")]),e._v(" "),t("h3",{attrs:{id:"包结构创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包结构创建"}},[e._v("#")]),e._v(" 包结构创建")]),e._v(" "),t("p",[e._v("在项目 src/main/java 下面创建如下的包结构：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("io\n +- github\n     +- xxyopen   \n        +- novel\n            +- NovelApplication.java -- 项目启动类\n            |\n            +- core -- 项目核心模块，包括各种工具、配置和常量等\n            |   +- common -- 业务无关的通用模块\n            |   |   +- exception -- 通用异常处理\n            |   |   +- constant -- 通用常量   \n            |   |   +- req -- 通用请求数据格式封装，例如分页请求数据  \n            |   |   +- resp -- 接口响应工具及响应数据格式封装 \n            |   |   +- util -- 通用工具   \n            |   | \n            |   +- auth -- 用户认证授权相关\n            |   +- config -- 业务相关配置\n            |   +- constant -- 业务相关常量         \n            |   +- filter -- 过滤器 \n            |   +- interceptor -- 拦截器\n            |   +- task -- 定时任务\n            |   +- util -- 业务相关工具 \n            |   +- wrapper -- 装饰器\n            |\n            +- dto -- 数据传输对象，包括对各种 Http 请求和响应数据的封装\n            |   +- req -- Http 请求数据封装\n            |   +- resp -- Http 响应数据封装\n            |\n            +- dao -- 数据访问层，与底层 MySQL 进行数据交互\n            +- manager -- 通用业务处理层，对第三方平台封装、对 Service 层通用能力的下沉以及对多个 DAO 的组合复用 \n            +- service -- 相对具体的业务逻辑服务层  \n            +- controller -- 主要是处理各种 Http 请求，各类基本参数校验，或者不复用的业务简单处理，返回 JSON 数据等\n            |   +- front -- 小说门户相关接口\n            |   +- author -- 作家管理后台相关接口\n            |   +- admin -- 平台管理后台相关接口\n            |   +- app -- app 接口\n            |   +- applet -- 小程序接口\n            |   +- open -- 开放接口，供第三方调用 \n")])])]),t("h3",{attrs:{id:"通用请求-响应数据格式封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用请求-响应数据格式封装"}},[e._v("#")]),e._v(" 通用请求/响应数据格式封装")]),e._v(" "),t("ol",[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.req")]),e._v("包下创建分页请求数据格式封装类：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 分页请求数据格式封装，所有分页请求的 Dto 类都应继承该类\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\n@Data\npublic class PageReqDto {\n\n    /**\n     * 请求页码，默认第 1 页\n     * */\n    private int pageNum = 1;\n\n    /**\n     * 每页大小，默认每页 10 条\n     * */\n    private int pageSize = 10;\n\n    /**\n     * 是否查询所有，默认不查所有\n     * 为 true 时，pageNum 和 pageSize 无效\n     * */\n    private boolean fetchAll = false;\n    \n}\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.resp")]),e._v("包下创建分页响应数据格式封装类：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 分页响应数据格式封装\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\n@Getter\npublic class PageRespDto<T> {\n\n    /**\n     * 页码\n     */\n    private final long pageNum;\n\n    /**\n     * 每页大小\n     */\n    private final long pageSize;\n\n    /**\n     * 总记录数\n     */\n    private final long total;\n\n    /**\n     * 分页数据集\n     */\n    private final List<? extends T> list;\n\n    /**\n     * 该构造函数用于通用分页查询的场景\n     * 接收普通分页数据和普通集合\n     */\n    public PageRespDto(long pageNum, long pageSize, long total, List<T> list) {\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.total = total;\n        this.list = list;\n    }\n\n    public static <T> PageRespDto<T> of(long pageNum, long pageSize, long total, List<T> list) {\n        return new PageRespDto<>(pageNum, pageSize, total, list);\n    }\n\n    /**\n     * 获取分页数\n     * */\n    public long getPages() {\n        if (this.pageSize == 0L) {\n            return 0L;\n        } else {\n            long pages = this.total / this.pageSize;\n            if (this.total % this.pageSize != 0L) {\n                ++pages;\n            }\n\n            return pages;\n        }\n    }\n}\n")])])]),t("h3",{attrs:{id:"rest-接口响应工具及响应数据格式封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rest-接口响应工具及响应数据格式封装"}},[e._v("#")]),e._v(" Rest 接口响应工具及响应数据格式封装")]),e._v(" "),t("ol",[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.constant")]),e._v("包下创建错误码枚举类：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 错误码枚举类。\n *\n * 错误码为字符串类型，共 5 位，分成两个部分：错误产生来源+四位数字编号。\n * 错误产生来源分为 A/B/C， A 表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付\n * 超时等问题； B 表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题； C 表示错误来源\n * 于第三方服务，比如 CDN 服务出错，消息投递超时等问题；四位数字编号从 0001 到 9999，大类之间的\n * 步长间距预留 100。\n *\n * 错误码分为一级宏观错误码、二级宏观错误码、三级宏观错误码。\n * 在无法更加具体确定的错误场景中，可以直接使用一级宏观错误码。\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\n@Getter\n@AllArgsConstructor\npublic enum ErrorCodeEnum {\n\n    /**\n     * 正确执行后的返回\n     * */\n    OK("00000","一切 ok"),\n\n    /**\n     * 一级宏观错误码，用户端错误\n     * */\n    USER_ERROR("A0001","用户端错误"),\n\n    /**\n     * 二级宏观错误码，用户注册错误\n     * */\n    USER_REGISTER_ERROR("A0100","用户注册错误"),\n\n    /**\n     * 二级宏观错误码，用户未同意隐私协议\n     * */\n    USER_NO_AGREE_PRIVATE_ERROR("A0101","用户未同意隐私协议"),\n\n    /**\n     * 二级宏观错误码，注册国家或地区受限\n     * */\n    USER_REGISTER_AREA_LIMIT_ERROR("A0102","注册国家或地区受限"),\n\n    /**\n     * 二级宏观错误码，用户请求参数错误\n     * */\n    USER_REQUEST_PARAM_ERROR("A0400","用户请求参数错误"),\n\n    // ...省略若干用户端二级宏观错误码\n\n    /**\n     * 一级宏观错误码，系统执行出错\n     * */\n    SYSTEM_ERROR("B0001","系统执行出错"),\n\n    /**\n     * 二级宏观错误码，系统执行超时\n     * */\n    SYSTEM_TIMEOUT_ERROR("B0100","系统执行超时"),\n\n    // ...省略若干系统执行二级宏观错误码\n\n    /**\n     * 一级宏观错误码，调用第三方服务出错\n     * */\n    THIRD_SERVICE_ERROR("C0001","调用第三方服务出错"),\n\n    /**\n     * 一级宏观错误码，中间件服务出错\n     * */\n    MIDDLEWARE_SERVICE_ERROR("C0100","中间件服务出错")\n\n    // ...省略若干三方服务调用二级宏观错误码    \n\n    ;\n\n    /**\n     * 错误码\n     * */\n    private String code;\n\n    /**\n     * 中文描述\n     * */\n    private String message;\n\n}\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.resp")]),e._v("包下创建 Http Rest 响应工具及数据格式封装类：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * Http Rest 响应工具及数据格式封装\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\n@Getter\npublic class RestResp<T> {\n\n    /**\n     * 响应码\n     */\n    private String code;\n\n    /**\n     * 响应消息\n     */\n    private String message;\n\n    /**\n     * 响应数据\n     */\n    private T data;\n\n    private RestResp() {\n        this.code = ErrorCodeEnum.OK.getCode();\n        this.message = ErrorCodeEnum.OK.getMessage();\n    }\n\n    private RestResp(ErrorCodeEnum errorCode) {\n        this.code = errorCode.getCode();\n        this.message = errorCode.getMessage();\n    }\n\n    private RestResp(T data) {\n        this.data = data;\n    }\n\n    /**\n     * 业务处理成功,无数据返回\n     */\n    public static RestResp<Void> ok() {\n        return new RestResp<>();\n    }\n\n    /**\n     * 业务处理成功，有数据返回\n     */\n    public static <T> RestResp<T> ok(T data) {\n        return new RestResp<>(data);\n    }\n\n    /**\n     * 业务处理失败\n     */\n    public static RestResp<Void> fail(ErrorCodeEnum errorCode) {\n        return new RestResp<>(errorCode);\n    }\n\n    /**\n     * 系统错误\n     */\n    public static RestResp<Void> error() {\n        return new RestResp<>(ErrorCodeEnum.SYSTEM_ERROR);\n    }\n\n    /**\n     * 判断是否成功\n     */\n    public boolean isOk() {\n        return Objects.equals(this.code, ErrorCodeEnum.OK.getCode());\n    }\n    \n}\n")])])]),t("h3",{attrs:{id:"通用异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用异常处理"}},[e._v("#")]),e._v(" 通用异常处理")]),e._v(" "),t("p",[e._v("在 Spring 3.2 中，新增了 "),t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/6.0.0-SNAPSHOT/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("@ControllerAdvice"),t("OutboundLink")],1),e._v(" 注解，用于定义适用于所有 @RequestMapping 方法的 @ExceptionHandler、@InitBinder 和 @ModelAttribute 方法。Spring Boot 默认情况下会映射到 /error 进行异常处理，但是提示十分不友好。我们可以使用该注解定义 @ExceptionHandler 方法来捕获 Controller 抛出的通用异常，并统一进行处理。")]),e._v(" "),t("ol",[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.exception")]),e._v("包下创建自定义业务异常类：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 自定义业务异常，用于处理用户请求时，业务错误时抛出\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\n@EqualsAndHashCode(callSuper = true)\n@Data\npublic class BusinessException extends RuntimeException {\n\n    private final ErrorCodeEnum errorCodeEnum;\n\n    public BusinessException(ErrorCodeEnum errorCodeEnum) {\n        // 不调用父类 Throwable的fillInStackTrace() 方法生成栈追踪信息，提高应用性能\n        // 构造器之间的调用必须在第一行\n        super(errorCodeEnum.getMessage(), null, false, false);\n        this.errorCodeEnum = errorCodeEnum;\n    }\n\n}\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.exception")]),e._v("包下创建通用异常处理器，处理系统异常、数据校验异常和我们自定义的业务异常：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 通用的异常处理器\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\n@Slf4j\n@RestControllerAdvice\npublic class CommonExceptionHandler {\n\n    /**\n     * 处理数据校验异常\n     * */\n    @ExceptionHandler(BindException.class)\n    public RestResp<Void> handlerBindException(BindException e){\n        log.error(e.getMessage(),e);\n        return RestResp.fail(ErrorCodeEnum.USER_REQUEST_PARAM_ERROR);\n    }\n\n    /**\n     * 处理业务异常\n     * */\n    @ExceptionHandler(BusinessException.class)\n    public RestResp<Void> handlerBusinessException(BusinessException e){\n        log.error(e.getMessage(),e);\n        return RestResp.fail(e.getErrorCodeEnum());\n    }\n\n    /**\n     * 处理系统异常\n     * */\n    @ExceptionHandler(Exception.class)\n    public RestResp<Void> handlerException(Exception e){\n        log.error(e.getMessage(),e);\n        return RestResp.error();\n    }\n\n}\n")])])]),t("h3",{attrs:{id:"常量类创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量类创建"}},[e._v("#")]),e._v(" 常量类创建")]),e._v(" "),t("ol",[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.common.constant")]),e._v("包下创建通用常量类和 API 路由常量类")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 通用常量\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\npublic class CommonConsts {\n\n    /**\n     * 是\n     * */\n    public static final Integer YES = 1;\n\n    /**\n     * 否\n     * */\n    public static final Integer NO = 0;\n\n    /**\n     * 性别常量\n     * */\n    public enum SexEnum{\n\n        /**\n         * 男\n         * */\n        MALE(0,"男"),\n\n        /**\n         * 女\n         * */\n        FEMALE(1,"女");\n\n        SexEnum(int code,String desc){\n            this.code = code;\n            this.desc = desc;\n        }\n\n        private int code;\n        private String desc;\n\n        public int getCode() {\n            return code;\n        }\n\n        public String getDesc() {\n            return desc;\n        }\n\n    }\n\n    // ...省略若干常量\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * API 路由常量\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\npublic class ApiRouterConsts {\n\n    /**\n     * API请求路径前缀\n     */\n    String API_URL_PREFIX = "/api";\n\n    /**\n     * 前台门户系统请求路径前缀\n     */\n    String API_FRONT_URL_PREFIX = API_URL_PREFIX + "/front";\n\n    /**\n     * 作家管理系统请求路径前缀\n     */\n    String API_AUTHOR_URL_PREFIX = API_URL_PREFIX + "/author";\n\n    /**\n     * 平台后台管理系统请求路径前缀\n     */\n    String API_ADMIN_URL_PREFIX = API_URL_PREFIX + "/admin";\n\n    /**\n     * 首页模块请求路径前缀\n     * */\n    String HOME_URL_PREFIX = "/home";\n\n    /**\n     * 小说模块请求路径前缀\n     * */\n    String BOOK_URL_PREFIX = "/book";\n\n    /**\n     * 会员模块请求路径前缀\n     * */\n    String USER_URL_PREFIX = "/user";\n\n    /**\n     * 前台门户首页API请求路径前缀\n     */\n    String API_FRONT_HOME_URL_PREFIX = API_FRONT_URL_PREFIX + HOME_URL_PREFIX;\n\n    /**\n     * 前台门户小说相关API请求路径前缀\n     */\n    String API_FRONT_BOOK_URL_PREFIX = API_FRONT_URL_PREFIX + BOOK_URL_PREFIX;\n\n    /**\n     * 前台门户会员相关API请求路径前缀\n     */\n    String API_FRONT_USER_URL_PREFIX = API_FRONT_URL_PREFIX + USER_URL_PREFIX;\n\n    // ...省略若干常量\n\n}\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.constant")]),e._v("包下创建缓存常量类")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 缓存相关常量\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\npublic class CacheConsts {\n\n    /**\n     * 本项目 Redis 缓存前缀\n     * */\n    public static final String REDIS_CACHE_PREFIX = "Cache::Novel::";\n\n\n    /**\n     * Caffeine 缓存管理器\n     * */\n    public static final String CAFFEINE_CACHE_MANAGER = "caffeineCacheManager";\n\n    /**\n     * Redis 缓存管理器\n     * */\n    public static final String REDIS_CACHE_MANAGER = "redisCacheManager";\n\n    /**\n     * 首页小说推荐缓存\n     * */\n    public static final String HOME_BOOK_CACHE_NAME = "homeBookCache";\n\n    /**\n     * 首页友情链接缓存\n     * */\n    public static final String HOME_FRIEND_LINK_CACHE_NAME = "homeFriendLinkCache";\n\n    /**\n     * 缓存配置常量\n     */\n    public enum CacheEnum {\n\n        HOME_BOOK_CACHE(1,HOME_BOOK_CACHE_NAME,0,1),\n\n        HOME_FRIEND_LINK_CACHE(2,HOME_FRIEND_LINK_CACHE_NAME,1000,1)\n\n        ;\n\n        /**\n         * 缓存类型 0-本地 1-本地和远程 2-远程\n         */\n        private int type;\n        /**\n         * 缓存的名字\n         */\n        private String name;\n        /**\n         * 失效时间（秒） 0-永不失效\n         */\n        private int ttl;\n        /**\n         * 最大容量\n         */\n        private int maxSize;\n\n        CacheEnum(int type, String name, int ttl, int maxSize) {\n            this.type = type;\n            this.name = name;\n            this.ttl = ttl;\n            this.maxSize = maxSize;\n        }\n\n        public boolean isLocal() {\n            return type <= 1;\n        }\n\n        public boolean isRemote() {\n            return type >= 1;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getTtl() {\n            return ttl;\n        }\n\n        public int getMaxSize() {\n            return maxSize;\n        }\n\n    }\n\n}\n')])])]),t("h3",{attrs:{id:"日志配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日志配置"}},[e._v("#")]),e._v(" 日志配置")]),e._v(" "),t("p",[e._v("Spring Boot 默认使用的是 Logback 日志实现，会自动读取类路径下的 logback-spring.xml, logback-spring.groovy, logback.xml, 或 logback.groovy 配置文件。")]),e._v(" "),t("p",[e._v("我们在项目 src/resource 下面添加如下内容的日志配置文件 logback-spring.xml 即可：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<configuration>\n    \x3c!-- 彩色日志依赖的渲染类 --\x3e\n    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>\n    <conversionRule conversionWord="wex"\n                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>\n    <conversionRule conversionWord="wEx"\n                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>\n    \x3c!-- 彩色日志格式 --\x3e\n    <property name="CONSOLE_LOG_PATTERN"\n              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>\n\n    \x3c!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, --\x3e\n    \x3c!-- appender是configuration的子节点，是负责写日志的组件。 --\x3e\n    \x3c!-- ConsoleAppender：把日志输出到控制台 --\x3e\n    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            \x3c!--\n            <pattern>%d %p (%file:%line\\)- %m%n</pattern>\n             --\x3e\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n            \x3c!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --\x3e\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n\n    \x3c!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --\x3e\n    \x3c!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log --\x3e\n    \x3c!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名 --\x3e\n    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\n        <File>logs/novel.log</File>\n        \x3c!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --\x3e\n        \x3c!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 --\x3e\n            \x3c!-- 文件名：logs/demo.2017-12-05.0.log --\x3e\n            <fileNamePattern>logs/debug.%d.%i.log</fileNamePattern>\n            \x3c!-- 每产生一个日志文件，该日志文件的保存期限为30天 --\x3e\n            <maxHistory>30</maxHistory>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                \x3c!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 --\x3e\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <encoder>\n            \x3c!-- pattern节点，用来设置日志的输入格式 --\x3e\n            <pattern>\n                %d %p (%file:%line\\)- %m%n\n            </pattern>\n            \x3c!-- 记录日志的编码:此处设置字符集 - --\x3e\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n    <springProfile name="dev">\n        \x3c!-- ROOT 日志级别 --\x3e\n        <root level="INFO">\n            <appender-ref ref="STDOUT"/>\n        </root>\n        \x3c!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 --\x3e\n        \x3c!-- com.maijinjie.springboot 为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG --\x3e\n        \x3c!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE --\x3e\n        <logger name="io.github.xxyopen" level="DEBUG" additivity="false">\n            <appender-ref ref="STDOUT"/>\n        </logger>\n    </springProfile>\n\n    <springProfile name="prod">\n        \x3c!-- ROOT 日志级别 --\x3e\n        <root level="INFO">\n            <appender-ref ref="STDOUT"/>\n            <appender-ref ref="FILE"/>\n        </root>\n        \x3c!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 --\x3e\n        \x3c!-- com.maijinjie.springboot 为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG --\x3e\n        \x3c!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE --\x3e\n        <logger name="io.github.xxyopen" level="ERROR" additivity="false">\n            <appender-ref ref="STDOUT"/>\n            <appender-ref ref="FILE"/>\n        </logger>\n    </springProfile>\n</configuration>\n')])])]),t("h3",{attrs:{id:"跨域配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域配置"}},[e._v("#")]),e._v(" 跨域配置")]),e._v(" "),t("p",[e._v("跨域是指浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问问题。")]),e._v(" "),t("p",[e._v("跨域是出于浏览器的同源策略限制，同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。")]),e._v(" "),t("p",[e._v("我们可以通过前端配置、后端配置或 nginx 配置来解决跨域问题。")]),e._v(" "),t("p",[e._v("如果选择前端配置，我们可以使用 node 中间件 proxy 配置跨域，前端通过 node proxy 来转发我们的接口请求，和浏览器直接打交道的是 node proxy，这样可以避免浏览器的同源策略。配置示例如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("proxy: {\n  '/api': {\n    target: 'http://localhost:8888',\n    // 请求改变源，此时 nginx 可以获取到真实的请求 ip\n    changeOrigin: true\n  }\n}\n")])])]),t("p",[e._v("如果通过 nginx 配置来解决跨域问题，我们在配置 location 路径转发时需要加上如下的配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 允许的请求头\nadd_header 'Access-Control-Allow-Methods' 'GET,OPTIONS,POST,PUT,DELETE' always;\nadd_header 'Access-Control-Allow-Credentials' 'true' always;\nadd_header 'Access-Control-Allow-Origin' '$http_origin' always;\nadd_header Access-Control-Allow-Headers $http_access_control_request_headers;\nadd_header Access-Control-Max-Age 3600;\n# 头转发\nproxy_set_header Host $host;\nproxy_set_header X-Real-Ip $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_connect_timeout 1000;\nproxy_read_timeout 1000;\n# 跨域配置\nif ($request_method = OPTIONS ) { return 200; }\n")])])]),t("p",[e._v("因为我们项目的侧重点在后端，而且 Spring MVC 提供了跨域解决方案（"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("CORS"),t("OutboundLink")],1),e._v("）的支持。所以我们这里通过后端配置来解决跨域问题。")]),e._v(" "),t("p",[e._v("首先我们需要在 application.yml 配置文件中添加跨域相关的配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 项目配置\nnovel:\n  # 跨域配置\n  cors:\n    # 允许跨域的域名\n    allow-origins:\n      - http://localhost:1024\n      - http://localhost:8080\n")])])]),t("p",[e._v("然后在"),t("code",[e._v("io.github.xxyopen.novel.core.config")]),e._v("包下创建 CorsProperties 类来绑定 CORS 配置属性:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 跨域配置属性\n *\n * @author xiongxiaoyang\n * @date 2022/5/17\n */\n@ConfigurationProperties(prefix = "novel.cors")\n@Data\npublic class CorsProperties {\n\n    /**\n     * 允许跨域的域名\n     * */\n    private List<String> allowOrigins;\n}\n')])])]),t("p",[e._v("最后在"),t("code",[e._v("io.github.xxyopen.novel.core.config")]),e._v("包下增加如下的 CORS 配置类：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 跨域配置\n *\n * @author xiongxiaoyang\n * @date 2022/5/13\n */\n@Configuration\n@EnableConfigurationProperties(CorsProperties.class)\n@RequiredArgsConstructor\npublic class CorsConfig {\n\n    private final CorsProperties corsProperties;\n\n    @Bean\n    public CorsFilter corsFilter() {\n        CorsConfiguration config = new CorsConfiguration();\n        // 允许的域,不要写*，否则cookie就无法使用了\n        for (String allowOrigin : corsProperties.getAllowOrigins()) {\n            config.addAllowedOrigin(allowOrigin);\n        }\n        // 允许的头信息\n        config.addAllowedHeader("*");\n        // 允许的请求方式\n        config.addAllowedMethod("*");\n        // 是否允许携带Cookie信息\n        config.setAllowCredentials(true);\n\n        UrlBasedCorsConfigurationSource configurationSource = new UrlBasedCorsConfigurationSource();\n        // 添加映射路径，拦截一切请求\n        configurationSource.registerCorsConfiguration("/**",config);\n        return new CorsFilter(configurationSource);\n    }\n    \n}\n')])])]),t("h3",{attrs:{id:"mybatis-增强工具-mybatis-plus-集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-增强工具-mybatis-plus-集成"}},[e._v("#")]),e._v(" Mybatis 增强工具 MyBatis-Plus 集成")]),e._v(" "),t("p",[e._v("[MyBatis-Plus] (https://baomidou.com)是一个 MyBatis (https://www.mybatis.org/mybatis-3)的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。我们可以按照如下步骤集成到我们的项目中：")]),e._v(" "),t("ol",[t("li",[e._v("添加 mybatis-plus 的启动器依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.5.1</version>\n</dependency>\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("配置 MapperScan 注解")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@SpringBootApplication\n@MapperScan("io.github.xxyopen.novel.dao.mapper")\npublic class NovelApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(NovelApplication.class, args);\n\t}\n\n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("因为我们系统涉及分页数据查询，所以我们还需要在"),t("code",[e._v("io.github.xxyopen.novel.core.config")]),e._v("包下配置 mybatis-plus 的分页插件：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * Mybatis-Plus 配置类\n *\n * @author xiongxiaoyang\n * @date 2022/5/16\n */\n@Configuration\npublic class MybatisPlusConfig {\n\n    /**\n     * 分页插件\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n\n}\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("数据源配置")])]),e._v(" "),t("p",[e._v("YAML 是 JSON 的超集，一种用于指定分层配置数据的便捷格式。本项目中我们统一使用 YAML 格式的配置文件，所以先将 resources 目录下的 application.properties 文件重命名为 application.yml，")]),e._v(" "),t("p",[e._v("然后在 application.yml 配置文件中加入以下数据源配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/novel?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai\n    username: root\n    password: test123456\n")])])]),t("p",[t("strong",[e._v("注：根据实际的数据库环境来修改相应的IP、端口号、数据库名、用户名和密码")])]),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[e._v("为了兼容 Spring Boot 3（Spring 6），在"),t("code",[e._v("org.springframework.core")]),e._v("包下创建"),t("code",[e._v("NestedIOException")]),e._v("异常类")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 兼容 mybatis-plus 3.5.1\n * mybatis-plus 的 MybatisSqlSessionFactoryBean 中使用到了这个异常\n * Spring 6 开始移除了该异常\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\npublic class NestedIOException extends IOException {\n\n}\n")])])]),t("h3",{attrs:{id:"代码生成器-mybatis-plus-generator-集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码生成器-mybatis-plus-generator-集成"}},[e._v("#")]),e._v(" 代码生成器 Mybatis-Plus-Generator 集成")]),e._v(" "),t("ol",[t("li",[e._v("添加相关依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-generator</artifactId>\n    <version>${mybatis-plus.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.apache.velocity</groupId>\n    <artifactId>velocity-engine-core</artifactId>\n    <version>2.3</version>\n    <scope>test</scope>\n</dependency>\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("在 test/resources/templates 下面创建以下模版文件")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/mybatisplusgen.png",alt:"gen-templates"}})]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("在 test/java 下面创建代码生成器类")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 代码生成器\n *\n * @author xiongxiaoyang\n * @date 2022/5/11\n */\npublic class Generator {\n\n    private static final String USERNAME = System.getenv().get("USER");\n\n    /**\n     * 项目信息\n     */\n    private static final String PROJECT_PATH = System.getProperty("user.dir");\n    private static final String JAVA_PATH = "/src/main/java";\n    private static final String RESOURCE_PATH = "/src/main/resources";\n    private static final String BASE_PACKAGE = "io.github.xxyopen.novel";\n\n    /**\n     * 数据库信息\n     */\n    private static final String DATABASE_IP = "127.0.0.1";\n    private static final String DATABASE_PORT = "3306";\n    private static final String DATABASE_NAME = "novel";\n    private static final String DATABASE_USERNAME = "root";\n    private static final String DATABASE_PASSWORD = "test123456";\n\n\n    public static void main(String[] args) {\n\n        // 传入需要生成的表名，多个用英文逗号分隔，所有用 all 表示\n        genCode("sys_user");\n\n    }\n\n\n    /**\n     * 代码生成\n     */\n    private static void genCode(String tables) {\n\n        // 全局配置\n        FastAutoGenerator.create(String.format("jdbc:mysql://%s:%s/%s?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai", DATABASE_IP, DATABASE_PORT, DATABASE_NAME), DATABASE_USERNAME, DATABASE_PASSWORD)\n                .globalConfig(builder -> {\n                    builder.author(USERNAME) // 设置作者\n                            .fileOverride()\n                            // kotlin\n                            //.enableSwagger() // 开启 swagger 模式\n                            .fileOverride() // 覆盖已生成文件\n                            .commentDate("yyyy/MM/dd")\n                            .outputDir(PROJECT_PATH + JAVA_PATH); // 指定输出目录\n                })\n                // 包配置\n                .packageConfig(builder -> builder.parent(BASE_PACKAGE) // 设置父包名\n                        .entity("dao.entity")\n                        .service("service")\n                        .serviceImpl("service.impl")\n                        .mapper("dao.mapper")\n                        .controller("controller.front")\n                        .pathInfo(Collections.singletonMap(OutputFile.mapperXml, PROJECT_PATH + RESOURCE_PATH + "/mapper")))\n                // 模版配置\n                .templateConfig(builder -> builder.disable(TemplateType.SERVICE)\n                        .disable(TemplateType.SERVICEIMPL)\n                        .disable(TemplateType.CONTROLLER))\n                // 策略配置\n                .strategyConfig(builder -> builder.addInclude(getTables(tables)) // 设置需要生成的表名\n                        .controllerBuilder()\n                        .enableRestStyle()\n                        .serviceBuilder()\n                        .formatServiceFileName("%sService")\n                ) // 开启生成@RestController 控制器\n                //.templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板\n                .execute();\n\n    }\n\n    /**\n     * 处理 all 和多表情况\n     */\n    protected static List<String> getTables(String tables) {\n        return "all".equals(tables) ? Collections.emptyList() : Arrays.asList(tables.split(","));\n    }\n\n}\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("修改 Generator 类中数据库相关配置，选择我们需要创建的表名（all)，运行 main 方法生成代码")])]),e._v(" "),t("h3",{attrs:{id:"本地缓存-caffeine-集成和配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地缓存-caffeine-集成和配置"}},[e._v("#")]),e._v(" 本地缓存 Caffeine 集成和配置")]),e._v(" "),t("p",[e._v("Caffeine 是 Java 8 对 Google Guava 缓存的重写，是一个提供了近乎最佳命中率的高性能的缓存库。我们按照如下步骤集成和配置：")]),e._v(" "),t("ol",[t("li",[e._v("添加 spring-boot-starter-cache 依赖")])]),e._v(" "),t("p",[e._v("使用 spring-boot-starter-cache “Starter” 可以快速添加基本缓存依赖项。 starter 引入了 spring-context-support。如果我们手动添加依赖项，则必须包含 spring-context-support 才能使用 JCache 或 Caffeine 支持。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("添加 caffeine 依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>com.github.ben-manes.caffeine</groupId>\n    <artifactId>caffeine</artifactId>\n</dependency>\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("自定义缓存管理器")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n    * Caffeine 缓存管理器\n    */\n@Bean\npublic CacheManager caffeineCacheManager() {\n    SimpleCacheManager cacheManager = new SimpleCacheManager();\n\n    List<CaffeineCache> caches = new ArrayList<>(CacheConsts.CacheEnum.values().length);\n    for (CacheConsts.CacheEnum c : CacheConsts.CacheEnum.values()) {\n        if (c.isLocal()) {\n            Caffeine<Object, Object> caffeine = Caffeine.newBuilder().recordStats().maximumSize(c.getMaxSize());\n            if (c.getTtl() > 0) {\n                caffeine.expireAfterWrite(Duration.ofSeconds(c.getTtl()));\n            }\n            caches.add(new CaffeineCache(c.getName(), caffeine.build()));\n        }\n    }\n\n    cacheManager.setCaches(caches);\n    return cacheManager;\n}\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("使用 @EnableCaching 注解开启缓存")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@SpringBootApplication\n@MapperScan("io.github.xxyopen.novel.dao.mapper")\n@EnableCaching\n@Slf4j\npublic class NovelApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(NovelApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner commandLineRunner(ApplicationContext context){\n\t\treturn args -> {\n\t\t\tMap<String, CacheManager> beans = context.getBeansOfType(CacheManager.class);\n\t\t\tlog.info("加载了如下缓存管理器：");\n\t\t\tbeans.forEach((k,v)->{\n\t\t\t\tlog.info("{}:{}",k,v.getClass().getName());\n\t\t\t\tlog.info("缓存：{}",v.getCacheNames());\n\t\t\t});\n\n\t\t};\n\t}\n\n}\n')])])]),t("p",[e._v("这样我们就可以使用 Spring Cache 的注解（例如 @Cacheable）开发了。")]),e._v(" "),t("h3",{attrs:{id:"分布式缓存-redis-集成和配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式缓存-redis-集成和配置"}},[e._v("#")]),e._v(" 分布式缓存 Redis 集成和配置")]),e._v(" "),t("p",[e._v("本地缓存虽然有着访问速度快的优点，但无法进行大数据的存储。并且当我们集群部署多个服务节点，或者后期随着业务发展进行服务拆分后，没法共享缓存和保证缓存数据的一致性。\n本地缓存的数据还会随应用程序的重启而丢失，这样对于需要持久化的数据满足不了需求，还会导致重启后数据库瞬时压力过大。")]),e._v(" "),t("p",[e._v("所以本地缓存一般适合于缓存只读数据，如统计类数据，或者每个部署节点独立的数据。其它情况就需要用到分布式缓存了。")]),e._v(" "),t("p",[e._v("分布式缓存的集成步骤和本地缓存基本差不多，除了替换 caffeine 的依赖项为我们 redis 的依赖和配置上我们自定义的 redis 缓存管理器外，还要在配置文件中加入 redis 的连接配置：")]),e._v(" "),t("ol",[t("li",[e._v("加入依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("配置 redis 缓存管理器")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 缓存配置类\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\n@Configuration\npublic class CacheConfig {\n\n    /**\n     * Caffeine 缓存管理器\n     */\n    @Bean\n    @Primary\n    public CacheManager caffeineCacheManager() {\n        SimpleCacheManager cacheManager = new SimpleCacheManager();\n\n        List<CaffeineCache> caches = new ArrayList<>(CacheConsts.CacheEnum.values().length);\n        for (CacheConsts.CacheEnum c : CacheConsts.CacheEnum.values()) {\n            if (c.isLocal()) {\n                Caffeine<Object, Object> caffeine = Caffeine.newBuilder().recordStats().maximumSize(c.getMaxSize());\n                if (c.getTtl() > 0) {\n                    caffeine.expireAfterWrite(Duration.ofSeconds(c.getTtl()));\n                }\n                caches.add(new CaffeineCache(c.getName(), caffeine.build()));\n            }\n        }\n\n        cacheManager.setCaches(caches);\n        return cacheManager;\n    }\n\n    /**\n     * Redis 缓存管理器\n     */\n    @Bean\n    public CacheManager redisCacheManager(RedisConnectionFactory connectionFactory) {\n        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory);\n\n        RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig()\n                .disableCachingNullValues().prefixCacheNameWith(CacheConsts.REDIS_CACHE_PREFIX);\n\n        Map<String, RedisCacheConfiguration> cacheMap = new LinkedHashMap<>(CacheConsts.CacheEnum.values().length);\n        for (CacheConsts.CacheEnum c : CacheConsts.CacheEnum.values()) {\n            if (c.isRemote()) {\n                if (c.getTtl() > 0) {\n                    cacheMap.put(c.getName(), RedisCacheConfiguration.defaultCacheConfig().disableCachingNullValues()\n                            .prefixCacheNameWith(CacheConsts.REDIS_CACHE_PREFIX).entryTtl(Duration.ofSeconds(c.getTtl())));\n                } else {\n                    cacheMap.put(c.getName(), RedisCacheConfiguration.defaultCacheConfig().disableCachingNullValues()\n                            .prefixCacheNameWith(CacheConsts.REDIS_CACHE_PREFIX));\n                }\n            }\n        }\n\n        RedisCacheManager redisCacheManager = new RedisCacheManager(redisCacheWriter, defaultCacheConfig, cacheMap);\n        redisCacheManager.setTransactionAware(true);\n        redisCacheManager.initializeCaches();\n        return redisCacheManager;\n    }\n\n}\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("application.yml 中加入 redis 连接配置信息")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring:\n  redis:\n    host: 127.0.0.1\n    port: 6379\n    password: 123456\n")])])]),t("h3",{attrs:{id:"搜索引擎-elasticsearch-集成与配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索引擎-elasticsearch-集成与配置"}},[e._v("#")]),e._v(" 搜索引擎 Elasticsearch 集成与配置")]),e._v(" "),t("h4",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("p",[e._v("Elastic Stack 是一个可以帮助我们构建搜索体验、解决问题并取得成功的搜索平台。核心产品包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 "),t("a",{attrs:{href:"https://www.elastic.co/cn/what-is/elk-stack",target:"_blank",rel:"noopener noreferrer"}},[e._v("ELK Stack"),t("OutboundLink")],1),e._v("）等等。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。")]),e._v(" "),t("p",[e._v("Elasticsearch 和 Kibana 都是在免费开源的基础上构建而成，适用于各种各样的用例，从日志开始，到能够想到的任何项目，无一不能胜任。")]),e._v(" "),t("p",[e._v("Elasticsearch 是一个基于 JSON 的分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储数据，帮助发现意料之中以及意料之外的情况。")]),e._v(" "),t("p",[e._v("Kibana 是一个免费且开放的用户界面，能够对 Elasticsearch 数据进行可视化，并在 Elastic Stack 中进行导航。我们可以进行各种操作，从跟踪查询负载，到理解请求如何流经整个应用，都能轻松完成。")]),e._v(" "),t("h4",{attrs:{id:"集成与配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集成与配置"}},[e._v("#")]),e._v(" 集成与配置")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Elasticsearch 和 Kibana 安装，如果不想在本地安装 Elasticsearch 和 Kibana，可以使用官方提供的免费试用版 "),t("a",{attrs:{href:"https://www.elastic.co/cn/cloud/?elektra=home&storm=cloud",target:"_blank",rel:"noopener noreferrer"}},[e._v("Elastic Cloud"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[e._v("Kibana 中创建索引:")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PUT /book\n{\n  "mappings" : {\n    "properties" : {\n      "id" : {\n        "type" : "long"\n      },\n      "authorId" : {\n        "type" : "long"\n      },\n      "authorName" : {\n        "type" : "text",\n        "analyzer": "ik_smart"\n      },\n      "bookName" : {\n        "type" : "text",\n        "analyzer": "ik_smart"\n      },\n      "bookDesc" : {\n        "type" : "text",\n        "analyzer": "ik_smart"\n      },\n      "bookStatus" : {\n        "type" : "short"\n      },\n      "categoryId" : {\n        "type" : "integer"\n      },\n      "categoryName" : {\n        "type" : "text",\n        "analyzer": "ik_smart"\n      },\n      "lastChapterId" : {\n        "type" : "long"\n      },\n      "lastChapterName" : {\n        "type" : "text",\n        "analyzer": "ik_smart"\n      },\n      "lastChapterUpdateTime" : {\n        "type": "long"\n      },\n      "picUrl" : {\n        "type" : "keyword",\n        "index" : false,\n        "doc_values" : false\n      },\n      "score" : {\n        "type" : "integer"\n      },\n      "wordCount" : {\n        "type" : "integer"\n      },\n      "workDirection" : {\n        "type" : "short"\n      },\n      "visitCount" : {\n        "type": "long"\n      }\n    }\n  }\n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("项目添加如下依赖：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependencies>\n\n    <dependency>\n      <groupId>co.elastic.clients</groupId>\n      <artifactId>elasticsearch-java</artifactId>\n      <version>8.2.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.12.3</version>\n    </dependency>\n\n</dependencies>\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("在 application.yml 中配置如下连接信息：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring:\n  elasticsearch:\n    uris:\n      - https://my-deployment-ce7ca3.es.us-central1.gcp.cloud.es.io:9243\n    username: elastic\n    password: qTjgYVKSuExX\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("配置 "),t("RouterLink",{attrs:{to:"/course/novel/2.html#全新的-elasticsearch-java-api-client"}},[e._v("Elasticsearch Java API Client")])],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * elasticsearch 相关配置\n *\n * @author xiongxiaoyang\n * @date 2022/5/23\n */\n@Configuration\n@ConditionalOnProperty(prefix = "spring.elasticsearch", name = "enable", havingValue = "true")\n@RequiredArgsConstructor\npublic class EsConfig {\n\n    @Bean\n    public ElasticsearchClient elasticsearchClient(RestClient restClient) {\n\n        // Create the transport with a Jackson mapper\n        ElasticsearchTransport transport = new RestClientTransport(\n                restClient, new JacksonJsonpMapper());\n\n        // And create the API client\n        return new ElasticsearchClient(transport);\n    }\n\n}\n')])])]),t("h3",{attrs:{id:"spring-amqp-集成与配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-amqp-集成与配置"}},[e._v("#")]),e._v(" Spring AMQP 集成与配置")]),e._v(" "),t("h4",{attrs:{id:"介绍-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("p",[e._v("AMQP（高级消息队列协议）是一个异步消息传递所使用的应用层协议规范，为面向消息的中间件设计，不受产品和开发语言的限制. Spring AMQP 将核心 Spring 概念应用于基于 AMQP 消息传递解决方案的开发。")]),e._v(" "),t("p",[e._v("RabbitMQ 是基于 AMQP 协议的轻量级、可靠、可扩展、可移植的消息中间件，Spring 使用 RabbitMQ 通过 AMQP 协议进行通信。Spring Boot 为通过 RabbitMQ 使用 AMQP 提供了多种便利，包括 spring-boot-starter-amqp “Starter”。")]),e._v(" "),t("h4",{attrs:{id:"集成与配置-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集成与配置-2"}},[e._v("#")]),e._v(" 集成与配置")]),e._v(" "),t("ol",[t("li",[e._v("可通过如下 Docker 命令 安装 RabbiMQ：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.10-management\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("登录 RabbiMQ 的 web 管理界面，创建虚拟主机"),t("code",[e._v("novel")]),e._v(":")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/rabbitmq.png",alt:"RabbitMQ"}})]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("项目中加入如下的 maven 依赖：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("在 application.yml 配置文件中加入 RabbitMQ 的连接配置：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('spring:\n  rabbitmq:\n    addresses: "amqp://guest:guest@47.106.243.172"\n    virtual-host: novel\n    template:\n      retry:\n        # 开启重试\n        enabled: true\n        # 最大重试次数\n        max-attempts: 3\n        # 第一次和第二次重试之间的持续时间\n        initial-interval: "3s"\n')])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("在 Spring Beans 中注入 AmqpTemplate 发送消息")])]),e._v(" "),t("h3",{attrs:{id:"分布式任务调度平台-xxl-job-集成与配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式任务调度平台-xxl-job-集成与配置"}},[e._v("#")]),e._v(" 分布式任务调度平台 XXL-JOB 集成与配置")]),e._v(" "),t("h4",{attrs:{id:"介绍-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-3"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("p",[e._v("XXL-JOB 是一个开箱即用的开源分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。由调度模块和执行模块构成：")]),e._v(" "),t("ul",[t("li",[e._v("调度模块（调度中心）：")])]),e._v(" "),t("p",[e._v("负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码。调度系统与任务解耦，提高了系统可用性和稳定性，同时调度系统性能不再受限于任务模块；\n支持可视化、简单且动态的管理调度信息，包括任务新建，更新，删除，GLUE开发和任务报警等，所有上述操作都会实时生效，同时支持监控调度结果以及执行日志，支持执行器Failover。")]),e._v(" "),t("ul",[t("li",[e._v("执行模块（执行器）：")])]),e._v(" "),t("p",[e._v("负责接收调度请求并执行任务逻辑。任务模块专注于任务的执行等操作，开发和维护更加简单和高效；\n接收“调度中心”的执行请求、终止请求和日志请求等。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/xxljob.png",alt:"XXL-JOB 架构图"}})]),e._v(" "),t("p",[e._v("XXL-JOB 将调度行为抽象形成“调度中心”公共平台，而平台自身并不承担业务逻辑，“调度中心”负责发起调度请求。")]),e._v(" "),t("p",[e._v("将任务抽象成分散的JobHandler，交由“执行器”统一管理，“执行器”负责接收调度请求并执行对应的JobHandler中业务逻辑。")]),e._v(" "),t("p",[e._v("因此，“调度”和“任务”两部分可以相互解耦，提高系统整体稳定性和扩展性；")]),e._v(" "),t("p",[e._v("XXL-JOB 的主要功能特性如下：")]),e._v(" "),t("ol",[t("li",[e._v("简单：支持通过 Web 页面对任务进行 CRUD 操作，操作简单，一分钟上手；")]),e._v(" "),t("li",[e._v("动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；")]),e._v(" "),t("li",[e._v("调度中心 HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心 HA；")]),e._v(" "),t("li",[e._v("执行器 HA（分布式）：任务分布式执行，任务”执行器”支持集群部署，可保证任务执行 HA；")]),e._v(" "),t("li",[e._v("注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；")]),e._v(" "),t("li",[e._v("弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；")]),e._v(" "),t("li",[e._v("触发策略：提供丰富的任务触发策略，包括：Cron 触发、固定间隔触发、固定延时触发、API（事件）触发、人工触发、父子任务触发；")]),e._v(" "),t("li",[e._v("调度过期策略：调度中心错过调度时间的补偿处理策略，包括：忽略、立即补偿触发一次等；")]),e._v(" "),t("li",[e._v("阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；")]),e._v(" "),t("li",[e._v("任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；")]),e._v(" "),t("li",[e._v("任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；")]),e._v(" "),t("li",[e._v("任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；")]),e._v(" "),t("li",[e._v("路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性 HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；")]),e._v(" "),t("li",[e._v("分片广播任务：执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；")]),e._v(" "),t("li",[e._v("动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。")]),e._v(" "),t("li",[e._v("故障转移：任务路由策略选择”故障转移”情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。")]),e._v(" "),t("li",[e._v("任务进度监控：支持实时监控任务进度；")]),e._v(" "),t("li",[e._v("Rolling 实时日志：支持在线查看调度结果，并且支持以 Rolling 方式实时查看执行器输出的完整的执行日志；")]),e._v(" "),t("li",[e._v("GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持30个版本的历史版本回溯。")]),e._v(" "),t("li",[e._v("脚本任务：支持以GLUE模式开发和运行脚本任务，包括 Shell、Python、NodeJS、PHP、PowerShell等类型脚本;")]),e._v(" "),t("li",[e._v("命令行任务：原生提供通用命令行任务Handler（Bean任务，”CommandJobHandler”）；业务方只需要提供命令行即可；")]),e._v(" "),t("li",[e._v("任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；")]),e._v(" "),t("li",[e._v("一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；")]),e._v(" "),t("li",[e._v("自定义任务参数：支持在线配置调度任务入参，即时生效；")]),e._v(" "),t("li",[e._v("调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；")]),e._v(" "),t("li",[e._v("数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；")]),e._v(" "),t("li",[e._v("邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；")]),e._v(" "),t("li",[e._v("推送 maven 中央仓库: 将会把最新稳定版推送到 maven 中央仓库, 方便用户接入和使用;")]),e._v(" "),t("li",[e._v("运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；")]),e._v(" "),t("li",[e._v("全异步：任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰，理论上支持任意时长任务的运行；")]),e._v(" "),t("li",[e._v("跨语言：调度中心与执行器提供语言无关的 RESTful API 服务，第三方任意语言可据此对接调度中心或者实现执行器。除此之外，还提供了 “多任务模式”和“httpJobHandler”等其他跨语言方案；")]),e._v(" "),t("li",[e._v("国际化：调度中心支持国际化设置，提供中文、英文两种可选语言，默认为中文；")]),e._v(" "),t("li",[e._v("容器化：提供官方 docker 镜像，并实时更新推送 dockerhub，进一步实现产品开箱即用；")]),e._v(" "),t("li",[e._v("线程池隔离：调度线程池进行隔离拆分，慢任务自动降级进入”Slow”线程池，避免耗尽调度线程，提高系统稳定性；")]),e._v(" "),t("li",[e._v("用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；")]),e._v(" "),t("li",[e._v("权限控制：执行器维度进行权限控制，管理员拥有全量权限，普通用户需要分配执行器权限后才允许相关操作；")])]),e._v(" "),t("h4",{attrs:{id:"集成与配置-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集成与配置-3"}},[e._v("#")]),e._v(" 集成与配置")]),e._v(" "),t("ol",[t("li",[e._v("初始化如下的"),t("code",[e._v("调度数据库")]),e._v("：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#\n# XXL-JOB v2.4.0-SNAPSHOT\n# Copyright (c) 2015-present, xuxueli.\n\nCREATE database if NOT EXISTS `xxl_job` default character set utf8mb4 collate utf8mb4_unicode_ci;\nuse `xxl_job`;\n\nSET NAMES utf8mb4;\n\nCREATE TABLE `xxl_job_info` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `job_group` int(11) NOT NULL COMMENT '执行器主键ID',\n  `job_desc` varchar(255) NOT NULL,\n  `add_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `author` varchar(64) DEFAULT NULL COMMENT '作者',\n  `alarm_email` varchar(255) DEFAULT NULL COMMENT '报警邮件',\n  `schedule_type` varchar(50) NOT NULL DEFAULT 'NONE' COMMENT '调度类型',\n  `schedule_conf` varchar(128) DEFAULT NULL COMMENT '调度配置，值含义取决于调度类型',\n  `misfire_strategy` varchar(50) NOT NULL DEFAULT 'DO_NOTHING' COMMENT '调度过期策略',\n  `executor_route_strategy` varchar(50) DEFAULT NULL COMMENT '执行器路由策略',\n  `executor_handler` varchar(255) DEFAULT NULL COMMENT '执行器任务handler',\n  `executor_param` varchar(512) DEFAULT NULL COMMENT '执行器任务参数',\n  `executor_block_strategy` varchar(50) DEFAULT NULL COMMENT '阻塞处理策略',\n  `executor_timeout` int(11) NOT NULL DEFAULT '0' COMMENT '任务执行超时时间，单位秒',\n  `executor_fail_retry_count` int(11) NOT NULL DEFAULT '0' COMMENT '失败重试次数',\n  `glue_type` varchar(50) NOT NULL COMMENT 'GLUE类型',\n  `glue_source` mediumtext COMMENT 'GLUE源代码',\n  `glue_remark` varchar(128) DEFAULT NULL COMMENT 'GLUE备注',\n  `glue_updatetime` datetime DEFAULT NULL COMMENT 'GLUE更新时间',\n  `child_jobid` varchar(255) DEFAULT NULL COMMENT '子任务ID，多个逗号分隔',\n  `trigger_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '调度状态：0-停止，1-运行',\n  `trigger_last_time` bigint(13) NOT NULL DEFAULT '0' COMMENT '上次调度时间',\n  `trigger_next_time` bigint(13) NOT NULL DEFAULT '0' COMMENT '下次调度时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `job_group` int(11) NOT NULL COMMENT '执行器主键ID',\n  `job_id` int(11) NOT NULL COMMENT '任务，主键ID',\n  `executor_address` varchar(255) DEFAULT NULL COMMENT '执行器地址，本次执行的地址',\n  `executor_handler` varchar(255) DEFAULT NULL COMMENT '执行器任务handler',\n  `executor_param` varchar(512) DEFAULT NULL COMMENT '执行器任务参数',\n  `executor_sharding_param` varchar(20) DEFAULT NULL COMMENT '执行器任务分片参数，格式如 1/2',\n  `executor_fail_retry_count` int(11) NOT NULL DEFAULT '0' COMMENT '失败重试次数',\n  `trigger_time` datetime DEFAULT NULL COMMENT '调度-时间',\n  `trigger_code` int(11) NOT NULL COMMENT '调度-结果',\n  `trigger_msg` text COMMENT '调度-日志',\n  `handle_time` datetime DEFAULT NULL COMMENT '执行-时间',\n  `handle_code` int(11) NOT NULL COMMENT '执行-状态',\n  `handle_msg` text COMMENT '执行-日志',\n  `alarm_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败',\n  PRIMARY KEY (`id`),\n  KEY `I_trigger_time` (`trigger_time`),\n  KEY `I_handle_code` (`handle_code`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_log_report` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `trigger_day` datetime DEFAULT NULL COMMENT '调度-时间',\n  `running_count` int(11) NOT NULL DEFAULT '0' COMMENT '运行中-日志数量',\n  `suc_count` int(11) NOT NULL DEFAULT '0' COMMENT '执行成功-日志数量',\n  `fail_count` int(11) NOT NULL DEFAULT '0' COMMENT '执行失败-日志数量',\n  `update_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i_trigger_day` (`trigger_day`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_logglue` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `job_id` int(11) NOT NULL COMMENT '任务，主键ID',\n  `glue_type` varchar(50) DEFAULT NULL COMMENT 'GLUE类型',\n  `glue_source` mediumtext COMMENT 'GLUE源代码',\n  `glue_remark` varchar(128) NOT NULL COMMENT 'GLUE备注',\n  `add_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_registry` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `registry_group` varchar(50) NOT NULL,\n  `registry_key` varchar(255) NOT NULL,\n  `registry_value` varchar(255) NOT NULL,\n  `update_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_group` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `app_name` varchar(64) NOT NULL COMMENT '执行器AppName',\n  `title` varchar(12) NOT NULL COMMENT '执行器名称',\n  `address_type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '执行器地址类型：0=自动注册、1=手动录入',\n  `address_list` text COMMENT '执行器地址列表，多地址逗号分隔',\n  `update_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(50) NOT NULL COMMENT '账号',\n  `password` varchar(50) NOT NULL COMMENT '密码',\n  `role` tinyint(4) NOT NULL COMMENT '角色：0-普通用户、1-管理员',\n  `permission` varchar(255) DEFAULT NULL COMMENT '权限：执行器ID列表，多个逗号分割',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i_username` (`username`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `xxl_job_lock` (\n  `lock_name` varchar(50) NOT NULL COMMENT '锁名称',\n  PRIMARY KEY (`lock_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nINSERT INTO `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) VALUES (1, 'xxl-job-executor-sample', '示例执行器', 0, NULL, '2018-11-03 22:21:31' );\nINSERT INTO `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) VALUES (1, 1, '测试任务1', '2018-11-03 22:21:31', '2018-11-03 22:21:31', 'XXL', '', 'CRON', '0 0 0 * * ? *', 'DO_NOTHING', 'FIRST', 'demoJobHandler', '', 'SERIAL_EXECUTION', 0, 0, 'BEAN', '', 'GLUE代码初始化', '2018-11-03 22:21:31', '');\nINSERT INTO `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) VALUES (1, 'admin', 'e10adc3949ba59abbe56e057f20f883e', 1, NULL);\nINSERT INTO `xxl_job_lock` ( `lock_name`) VALUES ( 'schedule_lock');\n\ncommit;\n")])])]),t("p",[t("strong",[e._v("注：调度中心支持集群部署，集群情况下各节点务必连接同一个 mysql 实例，如果 mysql 做主从，调度中心集群节点务必强制走主库。")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Docker 镜像方式搭建调度中心：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n* 如需自定义 mysql 等配置，可通过 "-e PARAMS" 指定，参数格式 PARAMS="--key=value  --key2=value2" ；\n* 如需自定义 JVM 内存参数 等配置，可通过 "-e JAVA_OPTS" 指定，参数格式 JAVA_OPTS="-Xmx512m" ；\n*/\ndocker run \\\n -e PARAMS=\' \\\n --spring.datasource.url=jdbc:mysql://47.106.243.172:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai \\\n --spring.datasource.username=test \\\n --spring.datasource.password=test!1234 \\\n --xxl.job.accessToken=123\' \\\n -p 8080:8080 \\\n -v /tmp:/data/applogs \\\n --name xxl-job-admin \\\n -d xuxueli/xxl-job-admin:{指定版本} \n')])])]),t("p",[t("strong",[e._v("注：如上所示，数据库密码中如果包含特殊字符(例如，& 或 ！)，需要对特殊字符进行转义，PARAMS 参数值一定要使用使用单引号而不能使用双引号。")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("常用转义字符")]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[e._v("作用")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("反斜杠（\\）")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("使反斜杠后面的一个变量变为单纯的字符串，如果放在引号里面，是不起作用的")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("单引号（’’）")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("转义其中所有的变量为单纯的字符串")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v('双引号（""）')]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("保留其中的变量属性，不进行转义处理")])])])]),e._v(" "),t("p",[e._v("调度中心访问地址：http://ip:8080/xxl-job-admin (该地址执行器将会使用到，作为回调地址)")]),e._v(" "),t("p",[e._v("默认登录账号 “admin/123456”，登录后如下图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/xxljob1.png",alt:"XXL-JOB 首页"}})]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("项目中引入"),t("code",[e._v("xxl-job-core")]),e._v("的 maven 依赖：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependency>\n    <groupId>com.xuxueli</groupId>\n    <artifactId>xxl-job-core</artifactId>\n    <version>2.3.1</version>\n</dependency>\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("application.yml 中加入执行器配置：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# XXL-JOB 配置\nxxl:\n  job:\n    admin:\n      ### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；\n      addresses: http://127.0.0.1:8080/xxl-job-admin\n    executor:\n      ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册\n      appname: xxl-job-executor-novel\n      ### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；\n      logpath: logs/xxl-job/jobhandler\n    ### xxl-job, access token\n    accessToken: 123\n')])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("在"),t("code",[e._v("io.github.xxyopen.novel.core.config")]),e._v("包下创建 XXL-JOB 配置类配置执行器组件：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * XXL-JOB 配置类\n *\n * @author xiongxiaoyang\n * @date 2022/5/31\n */\n@Configuration\n@Slf4j\npublic class XxlJobConfig {\n\n    @Value("${xxl.job.admin.addresses}")\n    private String adminAddresses;\n\n    @Value("${xxl.job.accessToken}")\n    private String accessToken;\n\n    @Value("${xxl.job.executor.appname}")\n    private String appname;\n\n    @Value("${xxl.job.executor.logpath}")\n    private String logPath;\n\n    @Bean\n    public XxlJobSpringExecutor xxlJobExecutor() {\n        log.info(">>>>>>>>>>> xxl-job config init.");\n        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();\n        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);\n        xxlJobSpringExecutor.setAccessToken(accessToken);\n        xxlJobSpringExecutor.setAppname(appname);\n        xxlJobSpringExecutor.setLogPath(logPath);\n        return xxlJobSpringExecutor;\n    }\n\n}\n')])])]),t("h2",{attrs:{id:"接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口开发"}},[e._v("#")]),e._v(" 接口开发")]),e._v(" "),t("h3",{attrs:{id:"接口规约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口规约"}},[e._v("#")]),e._v(" 接口规约")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("协议：生产环境必须使用 HTTPS。")])]),e._v(" "),t("li",[t("p",[e._v("路径：每一个 API 需对应一个路径，表示 API 具体的请求地址：")]),e._v(" "),t("p",[e._v("a） 代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。")]),e._v(" "),t("p",[e._v("b） URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。")]),e._v(" "),t("p",[e._v('c） 路径禁止携带表示请求内容类型的后缀，比如".json",".xml"，通过 accept 头表达即可。')])]),e._v(" "),t("li",[t("p",[e._v("请求方法：对具体操作的定义，常见的请求方法如下：")]),e._v(" "),t("p",[e._v("a） GET：从服务器取出资源。")]),e._v(" "),t("p",[e._v("b） POST：在服务器新建一个资源。")]),e._v(" "),t("p",[e._v("c） PUT：在服务器更新资源。")]),e._v(" "),t("p",[e._v("d） DELETE：从服务器删除资源。")])]),e._v(" "),t("li",[t("p",[e._v("请求内容： URL 带的参数必须无敏感信息或符合安全要求； body 里带参数时必须设置 Content-Type。")])]),e._v(" "),t("li",[t("p",[e._v("响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。")])])]),e._v(" "),t("h3",{attrs:{id:"service-dao-层方法命名规约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-dao-层方法命名规约"}},[e._v("#")]),e._v(" Service/DAO 层方法命名规约")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("获取单个对象的方法用 get 做前缀。")])]),e._v(" "),t("li",[t("p",[e._v("获取多个对象的方法用 list 做前缀，复数结尾，如： listObjects。")])]),e._v(" "),t("li",[t("p",[e._v("获取统计值的方法用 count 做前缀。")])]),e._v(" "),t("li",[t("p",[e._v("插入的方法用 save/insert 做前缀。")])]),e._v(" "),t("li",[t("p",[e._v("删除的方法用 remove/delete 做前缀。")])]),e._v(" "),t("li",[t("p",[e._v("修改的方法用 update 做前缀。")])])]),e._v(" "),t("h3",{attrs:{id:"首页相关接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首页相关接口开发"}},[e._v("#")]),e._v(" 首页相关接口开发")]),e._v(" "),t("p",[e._v("首页 UI 图如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/home.png",alt:"首页 UI 图"}})]),e._v(" "),t("p",[e._v("从上图可以看出首页包括 "),t("code",[e._v("小说推荐")]),e._v("（包括轮播图、周推、强推等）、"),t("code",[e._v("新闻公告")]),e._v("、"),t("code",[e._v("点击榜")]),e._v("、"),t("code",[e._v("新书榜")]),e._v("、"),t("code",[e._v("更新榜")]),e._v("（包括最新更新列表） 和 "),t("code",[e._v("友情链接")]),e._v(" 6个内容区域的展示，所以我们需要开发 6 个相关的 API 查询接口以提供数据给前端。")]),e._v(" "),t("p",[e._v("首先，我们需要在 controller、service、service.impl 包下创建首页模块、新闻模块和小说模块的 API 控制器 Controller、业务服务类 Service 以及服务实现类 ServiceImpl。")]),e._v(" "),t("p",[t("strong",[e._v("注：首页是我们小说门户的入口，承载着我们系统很大一部分流量，并且内容不需要实时更新。所以首页相关内容的查询最好都做缓存处理。")])]),e._v(" "),t("h4",{attrs:{id:"首页小说推荐查询接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首页小说推荐查询接口开发"}},[e._v("#")]),e._v(" 首页小说推荐查询接口开发")]),e._v(" "),t("p",[e._v("首页小说推荐的数据主要保存在在数据库**home_book ["),t("strong",[e._v("首页小说推荐")]),e._v("]**表中，该查询是一个从服务器取出资源的操作，所以该请求方法需要使用 GET 类型。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们需要在"),t("code",[e._v("io.github.xxyopen.novel.manager")]),e._v("包下创建首页推荐小说的缓存管理类如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 首页推荐小说 缓存管理类\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\n@Component\n@RequiredArgsConstructor\npublic class HomeBookCacheManager {\n\n    private final HomeBookMapper homeBookMapper;\n\n    private final BookInfoMapper bookInfoMapper;\n\n    /**\n     * 查询首页小说推荐，并放入缓存中\n     */\n    @Cacheable(cacheManager = CacheConsts.CAFFEINE_CACHE_MANAGER\n            , value = CacheConsts.HOME_BOOK_CACHE_NAME)\n    public List<HomeBookRespDto> listHomeBooks() {\n        // 从首页小说推荐表中查询出需要推荐的小说\n        List<HomeBook> homeBooks = homeBookMapper.selectList(null);\n\n        // 获取推荐小说ID列表\n        if (!CollectionUtils.isEmpty(homeBooks)) {\n            List<Long> bookIds = homeBooks.stream()\n                    .map(HomeBook::getBookId)\n                    .toList();\n\n            // 根据小说ID列表查询相关的小说信息列表\n            QueryWrapper<BookInfo> bookInfoQueryWrapper = new QueryWrapper<>();\n            bookInfoQueryWrapper.in("id", bookIds);\n            List<BookInfo> bookInfos = bookInfoMapper.selectList(bookInfoQueryWrapper);\n\n            // 组装 HomeBookRespDto 列表数据并返回\n            if(!CollectionUtils.isEmpty(bookInfos)){\n                Map<Long, BookInfo> bookInfoMap = bookInfos.stream()\n                        .collect(Collectors.toMap(BookInfo::getId, Function.identity()));\n                return homeBooks.stream().map(v -> {\n                    BookInfo bookInfo = bookInfoMap.get(v.getBookId());\n                    HomeBookRespDto bookRespDto = new HomeBookRespDto();\n                    bookRespDto.setBookId(v.getBookId());\n                    bookRespDto.setBookName(bookInfo.getBookName());\n                    bookRespDto.setPicUrl(bookInfo.getPicUrl());\n                    bookRespDto.setAuthorName(bookInfo.getAuthorName());\n                    bookRespDto.setBookDesc(bookInfo.getBookDesc());\n                    return bookRespDto;\n                }).toList();\n\n            }\n\n        }\n\n        return Collections.emptyList();\n    }\n\n}\n')])])]),t("p",[e._v("该缓存管理类包含了一个查询首页小说推荐数据的方法，该方法执行数据库查询逻辑并进行简单的处理得到我们需要的数据格式并通过 @Cacheable 注解缓存起来。\n该方法下次再被调用时会直接从缓存中拿取数据而不需要再一次查询数据库并处理，大大减轻了数据库的压力。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("然后我们在首页模块业务类"),t("code",[e._v("HomeService")]),e._v("中定义首页小说推荐查询的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 首页模块 服务类\n *\n * @author xiongxiaoyang\n * @date 2022/5/13\n */\npublic interface HomeService {\n\n    /**\n     * 查询首页小说推荐列表\n     *\n     * @return 首页小说推荐列表的 rest 响应结果\n     * */\n    RestResp<List<HomeBookRespDto>> listHomeBooks();\n}\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("接着我们在首页模块业务实现类"),t("code",[e._v("HomeServiceImpl")]),e._v("中实现"),t("code",[e._v("HomeService")]),e._v("中定义的抽象方法，通过调用"),t("code",[e._v("HomeBookCacheManager")]),e._v("的"),t("code",[e._v("listHomeBooks")]),e._v("方法获取到所需数据并返回：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 首页模块 服务实现类\n *\n * @author xiongxiaoyang\n * @date 2022/5/13\n */\n@Service\n@RequiredArgsConstructor\npublic class HomeServiceImpl implements HomeService {\n\n    private final HomeBookCacheManager homeBookCacheManager;\n\n    @Override\n    public RestResp<List<HomeBookRespDto>> listHomeBooks() {\n        return RestResp.ok(homeBookCacheManager.listHomeBooks());\n    }\n}\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("最后我们在首页模块的 API 控制器"),t("code",[e._v("HomeController")]),e._v("中定义 GET 类型的查询接口，调用 service 中的相应业务方法获得首页小说推荐数据并返回给前端：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 首页模块 API 接口\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\n@RestController\n@RequestMapping(ApiRouterConsts.API_FRONT_HOME_URL_PREFIX)\n@RequiredArgsConstructor\npublic class HomeController {\n\n    private final HomeService homeService;\n\n    /**\n     * 首页小说推荐查询接口\n     * */\n    @GetMapping("books")\n    public RestResp<List<HomeBookRespDto>> listHomeBooks(){\n        return homeService.listHomeBooks();\n    }\n}\n')])])]),t("h3",{attrs:{id:"登录注册相关接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录注册相关接口开发"}},[e._v("#")]),e._v(" 登录注册相关接口开发")]),e._v(" "),t("p",[e._v("JWT（JSON Web Token）是一种开放的"),t("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/rfc7519",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 7519"),t("OutboundLink")],1),e._v("行业标准方法，它定义了一种紧凑的、自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。服务端只生成和验证 JWT，客户端保存 JWT，所以 JWT 是无状态的。")]),e._v(" "),t("p",[e._v("由于 JWT 的无状态性，特别适用于分布式站点的单点登录（SSO）场景，已经成为了目前分布式服务权限控制解决方案的事实标准。我们 novel 项目是一个多系统并且后期会拓展为微服务架构的项目，所以使用 JWT 来实现登录认证。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/jwtk/jjwt",target:"_blank",rel:"noopener noreferrer"}},[e._v("JJWT"),t("OutboundLink")],1),e._v(" 是一个在 JVM 和 Android 上创建和验证 JWT 非常易于使用和理解的库，JJWT 是完全基于 JWT、JWS、JWE、JWK 和 JWA RFC 规范的纯 Java 实现，并且在 Apache 2.0 许可条款下开源，目前在 JAVA 应用程序中广泛使用。novel 项目集成了该库以实现 JWT 的生成和验证。")]),e._v(" "),t("p",[e._v("注册和登录的 UI 图如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/register.png",alt:"注册 UI 图"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/login.png",alt:"登录 UI 图"}})]),e._v(" "),t("h4",{attrs:{id:"获取图片验证码接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取图片验证码接口开发"}},[e._v("#")]),e._v(" 获取图片验证码接口开发")]),e._v(" "),t("p",[e._v("从注册的 UI 图中可以看出我们需要一个图形验证码来防止用户利用机器人自动注册。该图形验证码由服务端生成，当用户申请注册时必须带上验证码，由服务端来校验验证码的有效性，只有验证码匹配才能允许用户注册。获取图片验证码接口开发步骤如下：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("图形验证码属于一种图片资源，所以我们首先需要在 controller、service、service.impl 包下创建资源（Resource，处理图片/视频/文档等）模块的 API 控制器 Controller、业务服务类 Service 以及服务实现类 ServiceImpl。")])]),e._v(" "),t("li",[t("p",[e._v("接着我们需要在"),t("code",[e._v("io.github.xxyopen.novel.core.common.util")]),e._v("包下创建图形验证码工具类来生成随机校验码和对应的 Base64 编码后的图片：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 图片验证码工具类\n *\n * @author xiongxiaoyang\n * @date 2022/5/17\n */\n@UtilityClass\npublic class ImgVerifyCodeUtils {\n\n    /**\n     * 随机产生只有数字的字符串\n     */\n    private final String randNumber = "0123456789";\n\n    /**\n     * 图片宽\n     */\n    private final int width = 100;\n\n    /**\n     * 图片高\n     */\n    private final int height = 38;\n\n    private final Random random = new Random();\n\n    /**\n     * 获得字体\n     */\n    private Font getFont() {\n        return new Font("Fixed", Font.PLAIN, 23);\n    }\n\n\n    /**\n     * 生成校验码图片\n     */\n    public String genVerifyCodeImg(String verifyCode) throws IOException {\n        // BufferedImage类是具有缓冲区的Image类,Image类是用于描述图像信息的类\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_BGR);\n        // 产生Image对象的Graphics对象,改对象可以在图像上进行各种绘制操作\n        Graphics g = image.getGraphics();\n        //图片大小\n        g.fillRect(0, 0, width, height);\n        //字体大小\n        //字体颜色\n        g.setColor(new Color(204, 204, 204));\n        // 绘制干扰线\n        // 干扰线数量\n        int lineSize = 40;\n        for (int i = 0; i <= lineSize; i++) {\n            drawLine(g);\n        }\n        // 绘制随机字符\n        drawString(g, verifyCode);\n        g.dispose();\n        //将图片转换成Base64字符串\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        ImageIO.write(image, "JPEG", stream);\n        return Base64.getEncoder().encodeToString(stream.toByteArray());\n    }\n\n    /**\n     * 绘制字符串\n     */\n    private void drawString(Graphics g, String verifyCode) {\n        for (int i = 1; i <= verifyCode.length(); i++) {\n            g.setFont(getFont());\n            g.setColor(new Color(random.nextInt(101), random.nextInt(111), random\n                    .nextInt(121)));\n            g.translate(random.nextInt(3), random.nextInt(3));\n            g.drawString(String.valueOf(verifyCode.charAt(i - 1)), 13 * i, 23);\n        }\n    }\n\n    /**\n     * 绘制干扰线\n     */\n    private void drawLine(Graphics g) {\n        int x = random.nextInt(width);\n        int y = random.nextInt(height);\n        int xl = random.nextInt(13);\n        int yl = random.nextInt(15);\n        g.drawLine(x, y, x + xl, y + yl);\n    }\n\n    /**\n     * 获取随机的校验码\n     */\n    public String getRandomVerifyCode(int num) {\n        int randNumberSize = randNumber.length();\n        StringBuilder verifyCode = new StringBuilder();\n        for (int i = 0; i < num; i++) {\n            String rand = String.valueOf(randNumber.charAt(random.nextInt(randNumberSize)));\n            verifyCode.append(rand);\n        }\n        return verifyCode.toString();\n    }\n\n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("然后，我们在"),t("code",[e._v("io.github.xxyopen.novel.manager")]),e._v("包下创建验证码管理类，用于生成、校验和删除验证码（不限于图形验证码）：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 验证码 管理类\n *\n * @author xiongxiaoyang\n * @date 2022/5/12\n */\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class VerifyCodeManager {\n\n    private final StringRedisTemplate stringRedisTemplate;\n\n    /**\n     * 生成图形验证码，并放入 Redis 中\n     */\n    public String genImgVerifyCode(String sessionId) throws IOException {\n        String verifyCode = ImgVerifyCodeUtils.getRandomVerifyCode(4);\n        String img = ImgVerifyCodeUtils.genVerifyCodeImg(verifyCode);\n        stringRedisTemplate.opsForValue().set(CacheConsts.IMG_VERIFY_CODE_CACHE_KEY + sessionId\n                , verifyCode, Duration.ofMinutes(5));\n        return img;\n    }\n\n    /**\n     * 校验图形验证码\n     */\n    public boolean imgVerifyCodeOk(String sessionId, String verifyCode) {\n        return Objects.equals(\n                stringRedisTemplate.opsForValue().get(CacheConsts.IMG_VERIFY_CODE_CACHE_KEY + sessionId)\n                , verifyCode);\n    }\n\n    /**\n     * 从 Redis 中删除验证码\n     */\n    public void removeImgVerifyCode(String sessionId) {\n        stringRedisTemplate.delete(CacheConsts.IMG_VERIFY_CODE_CACHE_KEY + sessionId);\n    }\n")])])]),t("p",[t("strong",[e._v("注：我们在保存验证码的时候需要一个全局唯一的 sessionId 字符串用于标识该验证码属于哪个浏览器会话，该 sessionId 会在验证码返回给前端的时候一并返回，在用户提交注册的时候，该 sessionId 会和验证码一起提交用于校验")])]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("接着，我们在资源模块业务类"),t("code",[e._v("ResourceService")]),e._v("中定义获取图片验证码的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 获取图片验证码\n *\n * @throws IOException 验证码图片生成失败\n * @return Base64编码的图片\n */\nRestResp<ImgVerifyCodeRespDto> getImgVerifyCode() throws IOException;\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("接着，我们在资源模块业务实现类"),t("code",[e._v("ResourceServiceImpl")]),e._v("中实现"),t("code",[e._v("ResourceService")]),e._v("中定义的抽象方法，调用"),t("code",[e._v("VerifyCodeManager")]),e._v("中获取图形验证码方法并返回结果：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Override\npublic RestResp<ImgVerifyCodeRespDto> getImgVerifyCode() throws IOException {\n    String sessionId = IdWorker.get32UUID();\n    return RestResp.ok(ImgVerifyCodeRespDto.builder()\n            .sessionId(sessionId)\n            .img(verifyCodeManager.genImgVerifyCode(sessionId))\n            .build());\n}\n")])])]),t("ol",{attrs:{start:"6"}},[t("li",[e._v("最后，我们在资源模块的 API 控制器"),t("code",[e._v("ResourceController")]),e._v("中定义 GET 类型的查询接口，调用 service 中的相应业务方法获得图形验证码数据并返回给前端：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 获取图片验证码接口\n */\n@GetMapping("img_verify_code")\npublic RestResp<ImgVerifyCodeRespDto> getImgVerifyCode() throws IOException {\n    return resourceService.getImgVerifyCode();\n}\n')])])]),t("h4",{attrs:{id:"注册接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册接口开发"}},[e._v("#")]),e._v(" 注册接口开发")]),e._v(" "),t("p",[e._v("用户注册需要在在数据库**user_info ["),t("strong",[e._v("用户信息")]),e._v("]**表中插入一条用户数据，是一个在服务器新建资源的操作，所以该请求方法需要使用 POST 类型。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们在配置文件"),t("code",[e._v("application.yml")]),e._v("中定义 JWT 相关配置：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 项目配置\nnovel:\n  # JWT 密钥\n  jwt:\n    secret: E66559580A1ADF48CDD928516062F12E\n")])])]),t("p",[t("strong",[e._v("注：目前只有 JWT 密钥的配置，后期会拓展过期时间等其他配置")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("然后，我们在"),t("code",[e._v("io.github.xxyopen.novel.core.util")]),e._v("包下创建 JWT 工具类，用于 JWT 的生成和解析：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * JWT 工具类\n *\n * @author xiongxiaoyang\n * @date 2022/5/17\n */\n@ConditionalOnProperty("novel.jwt.secret")\n@Component\n@Slf4j\npublic class JwtUtils {\n\n    /**\n     * 注入JWT加密密钥\n     */\n    @Value("${novel.jwt.secret}")\n    private String secret;\n\n    /**\n     * 定义系统标识头常量\n     */\n    private static final String HEADER_SYSTEM_KEY = "systemKeyHeader";\n\n    /**\n     * 根据用户 ID 生成 JWT\n     * @param uid 用户 ID\n     * @param systemKey 系统标识\n     * @return JWT\n     */\n    public String generateToken(Long uid, String systemKey) {\n        return Jwts.builder()\n                .setHeaderParam(HEADER_SYSTEM_KEY, systemKey)\n                .setSubject(uid.toString())\n                .signWith(Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8)))\n                .compact();\n    }\n\n    /**\n     * 解析 JWT 返回用户 ID\n     * @param token JWT\n     * @param systemKey 系统标识\n     * @return 用户 ID\n     */\n    public Long parseToken(String token, String systemKey) {\n        Jws<Claims> claimsJws;\n        try {\n            claimsJws = Jwts.parserBuilder()\n                    .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8)))\n                    .build()\n                    .parseClaimsJws(token);\n            // OK, we can trust this JWT\n            // 判断该 JWT 是否属于指定系统\n            if (Objects.equals(claimsJws.getHeader().get(HEADER_SYSTEM_KEY), systemKey)) {\n                return Long.parseLong(claimsJws.getBody().getSubject());\n            }\n        } catch (JwtException e) {\n            log.warn("JWT解析失败:{}", token);\n            // don\'t trust the JWT!\n        }\n        return null;\n    }\n\n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("接着我们需要在用户模块业务类"),t("code",[e._v("UserService")]),e._v("中定义注册的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 用户注册\n *\n * @param dto 注册参数\n * @return JWT\n */\nRestResp<UserRegisterRespDto> register(UserRegisterReqDto dto);\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("接着我们在用户模块业务实现类"),t("code",[e._v("UserServiceImpl")]),e._v("中实现"),t("code",[e._v("UserService")]),e._v("中定义的抽象方法，对验证码、手机号进行校验。校验成功，则保存用户信息到数据库，并删除验证码和使用 JWT 工具类生成 JWT 字符串返回；校验失败，则返回相应的错误码给前端，具体代码如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Override\npublic RestResp<UserRegisterRespDto> register(UserRegisterReqDto dto) {\n    // 校验图形验证码是否正确\n    if (!verifyCodeManager.imgVerifyCodeOk(dto.getSessionId(), dto.getVelCode())) {\n        // 图形验证码校验失败\n        throw new BusinessException(ErrorCodeEnum.USER_VERIFY_CODE_ERROR);\n    }\n\n    // 校验手机号是否已注册\n    QueryWrapper<UserInfo> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(DatabaseConsts.UserInfoTable.COLUMN_USERNAME, dto.getUsername())\n            .last(DatabaseConsts.SqlEnum.LIMIT_1.getSql());\n    if (userInfoMapper.selectCount(queryWrapper) > 0) {\n        // 手机号已注册\n        throw new BusinessException(ErrorCodeEnum.USER_NAME_EXIST);\n    }\n\n    // 注册成功，保存用户信息\n    UserInfo userInfo = new UserInfo();\n    userInfo.setPassword(DigestUtils.md5DigestAsHex(dto.getPassword().getBytes(StandardCharsets.UTF_8)));\n    userInfo.setUsername(dto.getUsername());\n    userInfo.setNickName(dto.getUsername());\n    userInfo.setCreateTime(LocalDateTime.now());\n    userInfo.setUpdateTime(LocalDateTime.now());\n    userInfo.setSalt("0");\n    userInfoMapper.insert(userInfo);\n\n    // 删除验证码\n    verifyCodeManager.removeImgVerifyCode(dto.getSessionId());\n\n    // 生成JWT 并返回\n    return RestResp.ok(\n            UserRegisterRespDto.builder()\n                    .token(jwtUtils.generateToken(userInfo.getId(), SystemConfigConsts.NOVEL_FRONT_KEY))\n                    .uid(userInfo.getId())\n                    .build()\n    );\n\n}\n')])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("最后，我们在用户模块 API 控制器"),t("code",[e._v("UserController")]),e._v("中定义 POST 类型的注册接口，调用用户模块 service 中的相应业务方法注册用户：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n    * 用户注册接口\n    */\n@PostMapping("register")\npublic RestResp<UserRegisterRespDto> register(@Valid @RequestBody UserRegisterReqDto dto) {\n    return userService.register(dto);\n}\n')])])]),t("h4",{attrs:{id:"登录接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录接口开发"}},[e._v("#")]),e._v(" 登录接口开发")]),e._v(" "),t("p",[e._v("用户登录是一个特殊接口，不是单独请求一个资源，而是对于用户信息验证，创建一个 JWT，而且登录提交的数据中还包含敏感数据（密码）。URL 带的参数必须无敏感信息或符合安全要求，所以我们需要定义 POST 类型的接口来处理登录请求。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们需要在用户模块业务类"),t("code",[e._v("UserService")]),e._v("中定义登录的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 用户登录\n *\n * @param dto 登录参数\n * @return JWT + 昵称\n*/\nRestResp<UserLoginRespDto> login(UserLoginReqDto dto);\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("接着我们在用户模块业务实现类"),t("code",[e._v("UserServiceImpl")]),e._v("中实现"),t("code",[e._v("UserService")]),e._v("中定义的抽象方法，对登录用户名密码进行校验。校验通过，则生成 JWT 字符串返回；校验失败，则返回对应的错误码：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Override\npublic RestResp<UserLoginRespDto> login(UserLoginReqDto dto) {\n    // 查询用户信息\n    QueryWrapper<UserInfo> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(DatabaseConsts.UserInfoTable.COLUMN_USERNAME, dto.getUsername())\n            .last(DatabaseConsts.SqlEnum.LIMIT_1.getSql());\n    UserInfo userInfo = userInfoMapper.selectOne(queryWrapper);\n    if (Objects.isNull(userInfo)) {\n        // 用户不存在\n        throw new BusinessException(ErrorCodeEnum.USER_ACCOUNT_NOT_EXIST);\n    }\n\n    // 判断密码是否正确\n    if (!Objects.equals(userInfo.getPassword()\n            , DigestUtils.md5DigestAsHex(dto.getPassword().getBytes(StandardCharsets.UTF_8)))) {\n        // 密码错误\n        throw new BusinessException(ErrorCodeEnum.USER_PASSWORD_ERROR);\n    }\n\n    // 登录成功，生成JWT并返回\n    return RestResp.ok(UserLoginRespDto.builder()\n            .token(jwtUtils.generateToken(userInfo.getId(), SystemConfigConsts.NOVEL_FRONT_KEY))\n            .uid(userInfo.getId())\n            .nickName(userInfo.getNickName()).build());\n}\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("最后，我们在用户模块 API 控制器"),t("code",[e._v("UserController")]),e._v("中定义 POST 类型的登录接口，调用用户模块 service 中的相应业务方法：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 用户登录接口\n */\n@PostMapping("login")\npublic RestResp<UserLoginRespDto> login(@Valid @RequestBody UserLoginReqDto dto) {\n    return userService.login(dto);\n}\n\n')])])]),t("h3",{attrs:{id:"小说详情页相关接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小说详情页相关接口开发"}},[e._v("#")]),e._v(" 小说详情页相关接口开发")]),e._v(" "),t("p",[e._v("小说详情页 UI 图如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/novel/book_detail.png",alt:"小说详情页 UI 图"}})]),e._v(" "),t("p",[e._v("从上图可以看出小说详情页包括 "),t("code",[e._v("小说信息")]),e._v("（包括作家信息）、"),t("code",[e._v("最新章节")]),e._v("、"),t("code",[e._v("作品评论")]),e._v("、"),t("code",[e._v("同类推荐")]),e._v("四个内容区域的展示，而评论区还包含了评论发表、评论修改和评论删除的功能。所以我们需要开发与小说详情页相关的 4 个 API 查询接口、1 个 API 增加接口、1 个 API 修改接口和 1 个 API 删除接口提供给前端。")]),e._v(" "),t("h4",{attrs:{id:"小说评论发表接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小说评论发表接口开发"}},[e._v("#")]),e._v(" 小说评论发表接口开发")]),e._v(" "),t("p",[e._v("评论发表需要在数据库**book_comment ["),t("strong",[e._v("小说评论")]),e._v("]**表中插入一条评论数据，是一个在服务器新建资源的操作，所以该请求方法需要使用 POST 类型。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们需要在小说模块业务类"),t("code",[e._v("BookService")]),e._v("中定义发表评论的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 发表评论\n *\n * @param dto 评论相关 DTO\n * @return void\n */\nRestResp<Void> saveComment(UserCommentReqDto dto);\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("接着我们在小说模块业务实现类"),t("code",[e._v("BookServiceImpl")]),e._v("中实现"),t("code",[e._v("BookService")]),e._v("中定义的抽象方法，将用户对小说的评论数据保存到数据库中：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Override\npublic RestResp<Void> saveComment(UserCommentReqDto dto) {\n    // 校验用户是否已发表评论\n    QueryWrapper<BookComment> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(DatabaseConsts.BookCommentTable.COLUMN_USER_ID,dto.getUserId())\n            .eq(DatabaseConsts.BookCommentTable.COLUMN_BOOK_ID,dto.getBookId());\n    if(bookCommentMapper.selectCount(queryWrapper) > 0){\n        // 用户已发表评论\n        return RestResp.fail(ErrorCodeEnum.USER_COMMENTED);\n    }\n    BookComment bookComment = new BookComment();\n    bookComment.setBookId(dto.getBookId());\n    bookComment.setUserId(dto.getUserId());\n    bookComment.setCommentContent(dto.getCommentContent());\n    bookComment.setCreateTime(LocalDateTime.now());\n    bookComment.setUpdateTime(LocalDateTime.now());\n    bookCommentMapper.insert(bookComment);\n    return RestResp.ok();\n}\n")])])]),t("p",[t("strong",[e._v("注：保存评论之前我们需要对用户是否已发表评论进行校验，每个用户只能对同一本书发表一条评论。")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("最后，由于发表评论的行为属于用户（需要校验登录权限），所以我们在用户模块 API 控制器"),t("code",[e._v("UserController")]),e._v("中定义 POST 类型的增加接口，调用小说模块 service 中的相应业务方法保存小说评论数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 发表评论接口\n */\n@PostMapping("comment")\npublic RestResp<Void> comment(@Valid @RequestBody UserCommentReqDto dto) {\n    dto.setUserId(UserHolder.getUserId());\n    return bookService.saveComment(dto);\n}\n')])])]),t("h4",{attrs:{id:"小说评论修改接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小说评论修改接口开发"}},[e._v("#")]),e._v(" 小说评论修改接口开发")]),e._v(" "),t("p",[e._v("评论修改需要更新数据库**book_comment ["),t("strong",[e._v("小说评论")]),e._v("]**表中的评论数据，是一个在服务器更新资源的操作，所以该请求方法需要使用 PUT 类型。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们需要在小说模块业务类"),t("code",[e._v("BookService")]),e._v("中定义修改评论的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 修改评论\n * @param userId 用户ID\n * @param id 评论ID\n * @param content 修改后的评论内容\n * @return void\n * */\nRestResp<Void> updateComment(Long userId, Long id, String content);\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("接着我们在小说模块业务实现类"),t("code",[e._v("BookServiceImpl")]),e._v("中实现"),t("code",[e._v("BookService")]),e._v("中定义的抽象方法，更新数据表中的评论数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Override\npublic RestResp<Void> updateComment(Long userId, Long id, String content) {\n    QueryWrapper<BookComment> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(DatabaseConsts.CommonColumnEnum.ID.getName(), id)\n            .eq(DatabaseConsts.BookCommentTable.COLUMN_USER_ID,userId);\n    BookComment bookComment = new BookComment();\n    bookComment.setCommentContent(content);\n    bookCommentMapper.update(bookComment,queryWrapper);\n    return RestResp.ok();\n}\n")])])]),t("p",[t("strong",[e._v("注：用户只能更新自己的小说评论，所以更新评论表中数据的 where 条件不但需要小说ID还需要加上用户ID")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("最后，由于修改评论的行为属于用户（需要校验登录权限），所以我们在用户模块 API 控制器"),t("code",[e._v("UserController")]),e._v("中定义 PUT 类型的修改接口，调用小说模块 service 中的相应业务方法来更新小说评论数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 修改评论接口\n */\n@PutMapping("comment/{id}")\npublic RestResp<Void> updateComment(@PathVariable Long id, String content) {\n    return bookService.updateComment(UserHolder.getUserId(), id, content);\n}\n')])])]),t("h4",{attrs:{id:"小说评论删除接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小说评论删除接口开发"}},[e._v("#")]),e._v(" 小说评论删除接口开发")]),e._v(" "),t("p",[e._v("评论删除需要删除数据库**book_comment ["),t("strong",[e._v("小说评论")]),e._v("]**表中的评论数据，是一个从服务器删除资源的操作，所以该请求方法需要使用 DELETE 类型。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们需要在小说模块业务类"),t("code",[e._v("BookService")]),e._v("中定义删除评论的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 删除评论\n * @param userId 评论用户ID\n * @param commentId 评论ID\n * @return void\n * */\nRestResp<Void> deleteComment(Long userId, Long commentId);\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("接着我们在小说模块业务实现类"),t("code",[e._v("BookServiceImpl")]),e._v("中实现"),t("code",[e._v("BookService")]),e._v("中定义的抽象方法，删除数据表中的评论数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Override\npublic RestResp<Void> deleteComment(Long userId, Long commentId) {\n    QueryWrapper<BookComment> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(DatabaseConsts.CommonColumnEnum.ID.getName(), commentId)\n            .eq(DatabaseConsts.BookCommentTable.COLUMN_USER_ID,userId);\n        bookCommentMapper.delete(queryWrapper);\n    return RestResp.ok();\n}\n")])])]),t("p",[t("strong",[e._v("注：用户只能删除自己的小说评论，所以删除评论表中数据的 where 条件不但需要小说ID还需要加上用户ID")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("最后，由于删除评论的行为属于用户（需要校验登录权限），所以我们在用户模块 API 控制器"),t("code",[e._v("UserController")]),e._v("中定义 DELETE 类型的删除接口，调用小说模块 service 中的相应业务方法来删除小说评论数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 删除评论接口\n */\n@DeleteMapping("comment/{id}")\npublic RestResp<Void> deleteComment(@PathVariable Long id) {\n    return bookService.deleteComment(UserHolder.getUserId(), id);\n}\n')])])]),t("h4",{attrs:{id:"小说最新评论列表查询接口开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小说最新评论列表查询接口开发"}},[e._v("#")]),e._v(" 小说最新评论列表查询接口开发")]),e._v(" "),t("p",[e._v("最新评论列表查询需要查询数据库**book_comment ["),t("strong",[e._v("小说评论")]),e._v("]**表中的评论数据，是一个从服务器取出资源的操作，所以该请求方法需要使用 GET 类型。具体实现步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先我们需要在小说模块业务类"),t("code",[e._v("BookService")]),e._v("中定义查询最新评论列表的业务方法如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 小说最新评论查询\n *\n * @param bookId 小说ID\n * @return 小说最新评论数据\n */\nRestResp<BookCommentRespDto> listNewestComments(Long bookId);\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("接着我们在小说模块业务实现类"),t("code",[e._v("BookServiceImpl")]),e._v("中实现"),t("code",[e._v("BookService")]),e._v("中定义的抽象方法，查询数据表中的最新评论列表数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Override\npublic RestResp<BookCommentRespDto> listNewestComments(Long bookId) {\n    // 查询评论总数\n    QueryWrapper<BookComment> commentCountQueryWrapper = new QueryWrapper<>();\n    commentCountQueryWrapper.eq(DatabaseConsts.BookCommentTable.COLUMN_BOOK_ID, bookId);\n    Long commentTotal = bookCommentMapper.selectCount(commentCountQueryWrapper);\n    BookCommentRespDto bookCommentRespDto = BookCommentRespDto.builder().commentTotal(commentTotal).build();\n    if (commentTotal > 0) {\n\n        // 查询最新的评论列表\n        QueryWrapper<BookComment> commentQueryWrapper = new QueryWrapper<>();\n        commentQueryWrapper.eq(DatabaseConsts.BookCommentTable.COLUMN_BOOK_ID, bookId)\n                .orderByDesc(DatabaseConsts.CommonColumnEnum.CREATE_TIME.getName())\n                .last(DatabaseConsts.SqlEnum.LIMIT_5.getSql());\n        List<BookComment> bookComments = bookCommentMapper.selectList(commentQueryWrapper);\n\n        // 查询评论用户信息，并设置需要返回的评论用户名\n        List<Long> userIds = bookComments.stream().map(BookComment::getUserId).toList();\n        List<UserInfo> userInfos = userDaoManager.listUsers(userIds);\n        Map<Long, String> userInfoMap = userInfos.stream().collect(Collectors.toMap(UserInfo::getId, UserInfo::getUsername));\n        List<BookCommentRespDto.CommentInfo> commentInfos = bookComments.stream()\n                .map(v -> BookCommentRespDto.CommentInfo.builder()\n                        .id(v.getId())\n                        .commentUserId(v.getUserId())\n                        .commentUser(userInfoMap.get(v.getUserId()))\n                        .commentContent(v.getCommentContent())\n                        .commentTime(v.getCreateTime()).build()).toList();\n        bookCommentRespDto.setComments(commentInfos);\n    } else {\n        bookCommentRespDto.setComments(Collections.emptyList());\n    }\n    return RestResp.ok(bookCommentRespDto);\n}\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("最后，我们在小说模块 API 控制器"),t("code",[e._v("BookController")]),e._v("中定义 GET 类型的查询接口，调用 service 中的相应业务方法来查询小说最新评论列表数据：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 小说最新评论查询接口\n */\n@GetMapping("comment/newest_list")\npublic RestResp<BookCommentRespDto> listNewestComments(Long bookId) {\n    return bookService.listNewestComments(bookId);\n}\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("因为小说评论的用户名（手机号）属于敏感数据，我们不应该直接返回给前端。所以我们还需要定义一个 JSON 序列化器在 Spring MVC 序列化我们返回的 Java 对象为 JSON 字符串时格式化一下用户名，隐藏中间的 4 位数字为 "),t("code",[e._v("****")]),e._v("。代码如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 用户名序列化器（敏感信息，不应该在页面上完全显示）\n *\n * @author xiongxiaoyang\n * @date 2022/5/20\n */\npublic class UsernameSerializer extends JsonSerializer<String> {\n\n    @Override\n    public void serialize(String s, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n        jsonGenerator.writeString(s.substring(0,4) + "****" + s.substring(8));\n    }\n\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 小说评论 响应DTO\n * @author xiongxiaoyang\n * @date 2022/5/17\n */\n@Data\n@Builder\npublic class BookCommentRespDto {\n\n    private Long commentTotal;\n\n    private List<CommentInfo> comments;\n\n    @Data\n    @Builder\n    public static class CommentInfo {\n\n        private Long id;\n\n        private String commentContent;\n\n        @JsonSerialize(using = UsernameSerializer.class)\n        private String commentUser;\n\n        private Long commentUserId;\n\n        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")\n        private LocalDateTime commentTime;\n\n    }\n\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);